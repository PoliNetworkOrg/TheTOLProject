{"version":3,"sources":["utils/database.ts","components/Util/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","utils/style.ts","components/Util/Button.tsx","components/Header.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionHeader.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","utils/constants.ts","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Util/Separator.tsx","components/App.tsx","index.tsx"],"names":["sheetDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","RenderedText","text","DBPreview","Object","entries","filter","map","key","questions","q","validated","answers","b","c","d","e","id","sub","ErrorView","hidden","display","internal","theme","baseStyle","fontFamily","color","createStyle","styles","reduce","acc","curr","textStyle","fontSize","alignItems","leftIcon","float","marginRight","rightIcon","marginLeft","Button","props","style","onClick","label","divStyle","height","justifyContent","Header","viewState","currentView","selectView","baseText","AnswerForm","letterState","tmpAnswerState","currentQuestion","RadioRow","letter","undefined","fontWeight","textAlign","verticalAlign","paddingInline","spanStyle","width","toUpperCase","type","value","checked","onChange","event","target","controlsDiv","flex","gap","paddingBlock","labelStyle","BottomControls","tmpFlaggedState","flagged","setFlagged","updateAnswer","containerStyle","leftContainer","rightContainer","padding","pStyle","flexGrow","flexShrink","minWidth","iconStyle","QuestionHeader","questionIndex","backgroundColor","currentAnswer","shiftQuestionIndex","QuestionView","question","attachments","length","join","barStyle","textDecoration","RecapBar","href","sectionQuestions","i","answer","sectionAnswers","find","AnswerCell","index","currentQuestionIndexState","selected","cellContainerStyle","flexDirection","alignContent","cellSubStyle","boxShadow","selectedCell","outline","marginInline","margin","borderBottom","categoryDict","ing","mat","com","fis","sectionOrder","outerDiv","innerDiv","TopControls","sectionState","currentSection","setSection","next","findIndex","getNextSection","QuestionsForm","useState","qIndex","originalSetQIndex","setQIndex","answersState","shiftQIndex","offset","Separator","sampleSize","App","database","loadDatabase","selectQuestions","view","loadingError","showError","useEffect","readDatabase","then","options","fromEntries","values","includes","validQuestions","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77607238.chunk.js","sourcesContent":["import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\n\nexport const sheetDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type category = typeof sheetDict[keyof typeof sheetDict]\n\nexport type answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n  validated: boolean\n\n  // These are only present for COM questions\n  sub?: string\n  track?: string\n}\n\nexport type QuestionsData = Record<category, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProjectData/main/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(\n  db: Database,\n  options: Record<category, number>\n): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [category /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a category <=> exclude \"meta\"\n      .filter(([key]) => (Object.values(sheetDict) as string[]).includes(key))\n      .map(([key, questions]) => {\n        // Select only validated questions\n        const validQuestions = questions.filter((q) => q.validated)\n\n        // Get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(validQuestions.map((v) => v.id))).slice(\n          0,\n          options[key] as number\n        )\n\n        // Return only the questions with a selected ID\n        return [key, validQuestions.filter((q) => resIds.includes(q.id))]\n      })\n  ) as QuestionsData\n}\n","import React from 'react'\n// @ts-expect-error Waiting for DefinitelyTyped PR to be merged: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56687\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { category, Database, Question } from '../utils/database'\n\nimport RenderedText from './Util/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          category,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key}>\n          <h3>Category: {key}</h3>\n          <ul>\n            {questions\n              .filter((q) => q.text || key == 'com')\n              .map((q) => (\n                <div key={key + q.id + (q.sub || '')}>\n                  <RenderedText text={q.text} />\n                  <br />\n                  <p>Valid: {q.validated + ''}</p>\n                  <br />\n                  <RenderedText text={q.answers.a} />\n                  <br />\n                  <RenderedText text={q.answers.b} />\n                  <br />\n                  <RenderedText text={q.answers.c} />\n                  <br />\n                  <RenderedText text={q.answers.d} />\n                  <br />\n                  <RenderedText text={q.answers.e} />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nexport type cssLike = CSS.Properties\n\nexport const theme = {\n  primary: '#069',\n  lightBackground: '#F3F3EE',\n  questionYellow: 'yellow',\n  questionGreen: '#00D700',\n  softBlack: '#333'\n}\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana',\n  color: theme.softBlack\n}\n\nexport function createStyle(...styles: CSS.Properties[]) {\n  return {\n    ...baseStyle,\n    ...styles.reduce((acc, curr) => ({ ...acc, ...curr }), {})\n  }\n}\n","import React from 'react'\nimport { createStyle, cssLike } from '../../utils/style'\n\nconst textStyle = createStyle({\n  fontFamily: ' Arial',\n  fontSize: '9.5pt',\n  alignItems: 'center'\n})\n\nconst leftIcon = createStyle({\n  float: 'left',\n  marginRight: '2px'\n})\nconst rightIcon = createStyle({\n  float: 'right',\n  marginLeft: '2px'\n})\n\ninterface ButtonProps {\n  label: string\n  onClick: () => void\n  style?: cssLike\n  leftIcon?: () => JSX.Element\n  rightIcon?: () => JSX.Element\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button style={textStyle} onClick={props.onClick}>\n      <span style={leftIcon}>{props.leftIcon && props.leftIcon()}</span>\n      <span>{props.label}</span>\n      <span style={rightIcon}>{props.rightIcon && props.rightIcon()}</span>\n    </button>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\nimport { statePair } from '../utils/types'\nimport { view } from './App'\nimport Button from './Util/Button'\n\nconst divStyle = createStyle({\n  height: '70px',\n  display: 'flex',\n  alignItems: 'baseline',\n  justifyContent: 'space-between'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt',\n  display: 'inline-block'\n})\n\ninterface HeaderProps {\n  viewState: statePair<view>\n}\n\nexport default function Header({ viewState }: HeaderProps) {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n      <Button\n        label=\"Toggle demo view\"\n        onClick={() => {\n          const [currentView, selectView] = viewState\n          if (currentView == 'dbPreview') selectView('TOL-startSec')\n          else selectView('dbPreview')\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport RenderedText from '../Util/RenderedText'\n\nconst baseText = createStyle({\n  fontSize: '11pt'\n})\n\ninterface AnswerFormProps {\n  currentAnswer: Answer | undefined\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n}\n\nexport default function AnswerForm(props: AnswerFormProps) {\n  const letterState = props.tmpAnswerState\n\n  if (!props.currentQuestion)\n    return (\n      <span style={baseText}>\n        <br />\n        No answers to display ¯\\_(ツ)_/¯\n      </span>\n    )\n\n  return (\n    <div>\n      <RadioRow\n        letter=\"a\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.a}\n      />\n      <RadioRow\n        letter=\"b\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.b}\n      />\n      <RadioRow\n        letter=\"c\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.c}\n      />\n      <RadioRow\n        letter=\"d\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.d}\n      />\n      <RadioRow\n        letter=\"e\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.e}\n      />\n      <RadioRow letter={undefined} letterState={letterState} text=\"Non so\" />\n    </div>\n  )\n}\n\ninterface RadioRowProps {\n  letter: Answer['letter']\n  letterState: statePair<Answer['letter']>\n  text: string\n}\nfunction RadioRow(props: RadioRowProps) {\n  const textStyle = createStyle({\n    fontWeight: 'bold',\n    textAlign: 'center',\n    verticalAlign: 'middle',\n    paddingInline: '10px'\n  })\n  const spanStyle = createStyle({\n    width: '2em',\n    float: 'left',\n    display: 'inline-block'\n  })\n\n  return (\n    <tr style={baseText}>\n      <label>\n        <td style={textStyle}>\n          <span style={spanStyle}>{props.letter?.toUpperCase() || '?'} </span>\n          <input\n            type=\"radio\"\n            value={props.letter}\n            checked={props.letter == props.letterState[0]}\n            onChange={(event) => {\n              // @ts-expect-error The value is correct\n              props.letterState[1](event.target.value || undefined)\n            }}\n          />\n        </td>\n        <td>\n          <RenderedText text={props.text} />\n        </td>\n      </label>\n    </tr>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport { FaCheck } from 'react-icons/fa'\nimport Button from '../Util/Button'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport { Question } from '../../utils/database'\n\nconst controlsDiv = createStyle({\n  display: 'flex',\n  flex: 1,\n  justifyContent: 'flex-end',\n  fontSize: '9.5pt',\n  verticalAlign: 'middle',\n  gap: '10px',\n  paddingBlock: '10px'\n})\n\nconst labelStyle = createStyle({ display: 'flex', alignItems: 'center' })\n\ninterface BottomControlsProps {\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n  tmpFlaggedState: statePair<boolean>\n  updateAnswer: (updatedAnswer: Answer) => void\n}\nexport default function BottomControls(props: BottomControlsProps) {\n  const [flagged, setFlagged] = props.tmpFlaggedState\n\n  if (!props.currentQuestion) return <div style={controlsDiv} />\n\n  return (\n    <div style={controlsDiv}>\n      <label style={labelStyle}>\n        <input\n          type=\"checkbox\"\n          checked={flagged}\n          onChange={() => {\n            setFlagged(!flagged)\n          }}\n        />\n        <span>Da rivedere</span>\n      </label>\n      <Button\n        label=\"Conferma e vai alla successiva\"\n        leftIcon={() => <FaCheck />}\n        onClick={() => {\n          props.updateAnswer({\n            id: props.currentQuestion.id,\n            sub: props.currentQuestion.sub,\n            letter: props.tmpAnswerState[0],\n            flagged\n          })\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { Answer } from '../App'\nimport { FcLeft, FcRight } from 'react-icons/fc'\nimport Button from '../Util/Button'\n\nconst containerStyle = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst leftContainer = createStyle({\n  display: 'flex'\n})\n\nconst rightContainer = createStyle({\n  display: 'flex',\n  padding: '1em',\n  gap: '5px'\n})\n\nconst pStyle = createStyle({\n  flexGrow: 1,\n  flexShrink: 1,\n  textAlign: 'center',\n  fontSize: '11pt',\n  minWidth: '4em',\n  padding: '7.5px'\n})\n\nconst iconStyle = createStyle({\n  height: '17,5px',\n  width: '17,5px'\n})\n\ninterface QuestionHeaderProps {\n  questionIndex: number\n  shiftQuestionIndex: (offset: number) => void\n  sectionQuestions: Question[]\n  currentAnswer: Answer\n}\nexport default function QuestionHeader(props: QuestionHeaderProps) {\n  return (\n    <div style={containerStyle}>\n      <div style={leftContainer}>\n        <p style={{ ...pStyle, fontWeight: 'bold', width: '11em' }}>\n          Domanda {props.questionIndex + 1}\n        </p>\n        <p\n          style={{\n            ...pStyle,\n            backgroundColor: props.currentAnswer?.flagged\n              ? theme.questionYellow\n              : props.currentAnswer?.letter\n              ? theme.questionGreen\n              : 'inherit'\n          }}\n        >\n          {(props.currentAnswer?.letter?.toUpperCase() || '') +\n            (props.currentAnswer?.flagged ? '?' : '') || ' '}\n        </p>\n        <p style={pStyle}>\n          Risposta {props.currentAnswer?.letter ? '' : 'non '}data\n        </p>\n      </div>\n      <div style={rightContainer}>\n        <Button\n          label=\"precedente\"\n          onClick={() => props.shiftQuestionIndex(-1)}\n          leftIcon={() => <FcLeft style={iconStyle} />}\n        />\n        <Button\n          label=\"successiva\"\n          onClick={() => props.shiftQuestionIndex(1)}\n          rightIcon={() => <FcRight style={iconStyle} />}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport RenderedText from '../Util/RenderedText'\n\ninterface QuestionViewProps {\n  question: Question\n}\n\nconst textStyle = createStyle()\n\nexport default function QuestionView({ question }: QuestionViewProps) {\n  if (!question)\n    return <span style={textStyle}>No question to display ¯\\_(ツ)_/¯</span>\n\n  return (\n    <div style={textStyle}>\n      <RenderedText text={question.text}></RenderedText>\n      <br />\n      <br />\n      <span>\n        {question.attachments?.length\n          ? 'TODO ' + question.attachments.join(', ')\n          : ''}\n      </span>\n    </div>\n  )\n}\n","import React from 'react'\nimport { answerLetter, category, QuestionsData } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData } from '../App'\n\nconst defaultBorder = 'thin solid #606060'\n\nconst barStyle = createStyle({\n  display: 'flex',\n  fontSize: '9.5pt',\n  textDecoration: 'none',\n  color: theme.primary\n})\n\ninterface RecapBarProps {\n  sectionAnswers: AnswersData[category]\n  currentQuestionIndexState: statePair<number>\n  sectionQuestions: QuestionsData[category]\n}\nexport default function RecapBar(props: RecapBarProps) {\n  return (\n    <a style={barStyle} href=\"#\">\n      {props.sectionQuestions.map((q, i) => {\n        const answer = props.sectionAnswers.find(\n          (a) => a && a.id == q.id && (q.sub ? q.sub == a.sub : true)\n        )\n        return (\n          <AnswerCell\n            key={i}\n            index={i}\n            letter={answer?.letter}\n            flagged={answer?.flagged || false}\n            onClick={() => {\n              props.currentQuestionIndexState[1](i)\n            }}\n            selected={props.currentQuestionIndexState[0] == i}\n          />\n        )\n      })}\n    </a>\n  )\n}\n\nconst cellContainerStyle = createStyle({\n  display: 'flex',\n  flexShrink: 1,\n  flexDirection: 'column',\n  alignContent: 'baseline',\n  textAlign: 'center',\n  width: '4em'\n})\n\nconst cellSubStyle = createStyle({\n  padding: '0.3em',\n  height: '1.2em',\n  boxShadow:\n    '1px 0 0 0 #606060, 0 1px 0 0 #606060, 1px 1px 0 0 #606060, /* corner */ 1px 0 0 0 #606060 inset, 0 1px 0 0 #606060 inset'\n})\n\nconst selectedCell = createStyle({\n  outline: `5px solid ${theme.primary}`,\n  marginInline: '4px',\n  color: 'black'\n})\n\nconst pStyle = createStyle({\n  margin: 'auto'\n})\n\ninterface AnswerCellProps {\n  index: number\n  letter: answerLetter | undefined\n  flagged: boolean\n  onClick: () => void\n  selected: boolean\n}\nfunction AnswerCell(props: AnswerCellProps) {\n  return (\n    <div\n      style={{\n        ...cellContainerStyle,\n        backgroundColor: theme.lightBackground,\n        ...(props.selected ? selectedCell : {})\n      }}\n      onClick={props.onClick}\n    >\n      <div\n        style={{\n          ...cellSubStyle,\n          borderBottom: defaultBorder,\n          ...(props.selected ? { fontWeight: 'bold' } : {})\n        }}\n      >\n        <p style={pStyle}>{props.index + 1}</p>\n      </div>\n      <div\n        style={{\n          ...cellSubStyle,\n          backgroundColor: props.flagged\n            ? theme.questionYellow\n            : props.letter\n            ? theme.questionGreen\n            : 'white'\n        }}\n      >\n        <p style={pStyle}>\n          {props.letter?.toUpperCase() || ' '}\n          {props.flagged && '?'}\n        </p>\n      </div>\n    </div>\n  )\n}\n","import { category } from './database'\n\nexport const categoryDict: Record<category, string> = {\n  ing: 'Inglese',\n  mat: 'Matematica',\n  com: 'Comprensione',\n  fis: 'Fisica'\n}\n\nconst sectionOrder: category[] = ['ing', 'mat', 'com', 'fis']\nexport function getNextSection(currentSection: category) {\n  const i = sectionOrder.findIndex((e) => e == currentSection)\n  return sectionOrder[i + 1]\n}\n","import React from 'react'\nimport { categoryDict, getNextSection } from '../../utils/constants'\nimport { category, QuestionsData } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport Button from '../Util/Button'\n\nconst outerDiv = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst innerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'baseline',\n  flexDirection: 'row',\n  gap: '15px',\n  fontSize: '11pt'\n})\n\ninterface TopControlsProps {\n  sectionState: statePair<category>\n  viewState: statePair<view>\n  questions: QuestionsData\n  answers: AnswersData\n}\n\nexport default function TopControls(props: TopControlsProps) {\n  const [currentSection, setSection] = props.sectionState\n\n  return (\n    <div style={outerDiv}>\n      <div style={innerDiv}>\n        <div>\n          <p>\n            Sezione: {categoryDict[currentSection]} <br />\n            Riposte: {props.answers[currentSection].length} /{' '}\n            {props.questions[currentSection].length} (\n            {props.answers[currentSection].reduce(\n              (acc, curr) => acc + (curr.flagged ? 1 : 0),\n              0\n            )}{' '}\n            da rivedere)\n          </p>\n        </div>\n        <Button\n          label=\"Chiudi sezione\"\n          onClick={() => {\n            const next = getNextSection(currentSection)\n            if (next) setSection(next)\n            else props.viewState[1]('TOL-end')\n          }}\n        />\n      </div>\n      <p>Placeholder: timer</p>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { category, QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { Answer, AnswersData, view } from '../App'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionHeader from './QuestionHeader'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  questions: QuestionsData\n  viewState: statePair<view>\n  sectionState: statePair<category>\n  answersState: statePair<AnswersData>\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  const [qIndex, originalSetQIndex] = useState(0),\n    [currentSection, setSection] = props.sectionState,\n    tmpFlaggedState = useState(false),\n    tmpAnswerState = useState<Answer['letter']>()\n\n  const setQIndex = (index: React.SetStateAction<number>) => {\n    const curr = props.answersState[0][currentSection][index as number]\n    tmpFlaggedState[1](curr?.flagged || false)\n    tmpAnswerState[1](curr?.letter || undefined)\n    return originalSetQIndex(index)\n  }\n  const currentQuestionIndexState: statePair<number> = [qIndex, setQIndex]\n\n  const shiftQIndex = (offset: number) => {\n    const next =\n      (qIndex + offset + sectionQuestions.length) % sectionQuestions.length || 0\n    return setQIndex(next)\n  }\n\n  if (!props.questions) return <span>Loading...</span>\n\n  const sectionQuestions = props.questions[props.sectionState[0]],\n    currentQuestion = sectionQuestions[qIndex],\n    currentAnswer = props.answersState[0][currentSection][qIndex]\n\n  return (\n    <div>\n      <TopControls\n        sectionState={[\n          currentSection,\n          (...args) => {\n            setQIndex(0)\n            setSection(...args)\n          }\n        ]}\n        viewState={props.viewState}\n        questions={props.questions}\n        answers={props.answersState[0]}\n      />\n      <RecapBar\n        currentQuestionIndexState={currentQuestionIndexState}\n        sectionAnswers={props.answersState[0][props.sectionState[0]]}\n        sectionQuestions={sectionQuestions}\n      />\n      <QuestionHeader\n        currentAnswer={currentAnswer}\n        questionIndex={qIndex}\n        shiftQuestionIndex={shiftQIndex}\n        sectionQuestions={sectionQuestions}\n      />\n      <QuestionView question={currentQuestion} />\n      <AnswerForm\n        currentAnswer={currentAnswer}\n        currentQuestion={currentQuestion}\n        tmpAnswerState={tmpAnswerState}\n      />\n      <BottomControls\n        currentQuestion={currentQuestion}\n        tmpAnswerState={tmpAnswerState}\n        tmpFlaggedState={tmpFlaggedState}\n        updateAnswer={(a) => {\n          const next = props.answersState[0]\n          next[currentSection][qIndex] = a\n          props.answersState[1](next)\n          shiftQIndex(1)\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle, theme } from '../../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  answerLetter,\n  category,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Util/Separator'\n\nconst sampleSize: Record<category, number> = {\n  ing: 30,\n  mat: 25,\n  com: 1, // We're counting IDs, so it'll be only one (worth 5 questions)\n  fis: 5\n}\n\nexport type view = 'dbPreview' | 'TOL-startSec' | 'TOL-end'\n\nexport interface Answer {\n  id: string\n  sub?: string\n  letter: answerLetter | undefined\n  flagged: boolean\n}\n\nexport type AnswersData = Record<category, Answer[]>\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, selectQuestions] = useState<QuestionsData>()\n  const [view, selectView] = useState<view>('dbPreview')\n  const sectionState = useState<category>('ing')\n  const answersState = useState<AnswersData>({\n    ing: [],\n    mat: [],\n    com: [],\n    fis: []\n  })\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          selectQuestions(selectRandomQuestions(db, sampleSize))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header viewState={[view, selectView]} />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {/* <p>App start</p> */}\n\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : questions ? (\n        <QuestionsForm\n          questions={questions as QuestionsData}\n          viewState={[view, selectView]}\n          sectionState={sectionState}\n          answersState={answersState}\n        />\n      ) : undefined}\n      {/* <p>App end</p> */}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}