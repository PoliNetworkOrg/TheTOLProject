{"version":3,"sources":["utils/database.ts","components/Util/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","utils/style.ts","components/Util/Button.tsx","components/Header.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","utils/constants.ts","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Util/Separator.tsx","components/App.tsx","index.tsx"],"names":["sheetDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","RenderedText","text","DBPreview","Object","entries","filter","map","key","questions","q","validated","answers","b","c","d","e","id","sub","ErrorView","hidden","display","internal","baseStyle","fontFamily","createStyle","styles","reduce","acc","curr","theme","textStyle","fontSize","Button","props","onClick","leftIcon","style","label","rightIcon","divStyle","height","alignItems","justifyContent","Header","viewState","currentView","selectView","AnswerForm","BottomControls","QuestionView","barStyle","textDecoration","color","RecapBar","href","sectionQuestions","i","answer","sectionAnswers","find","AnswerCell","index","letter","flagged","currentQuestionIndexState","selected","cellContainerStyle","flexShrink","flexDirection","alignContent","textAlign","width","cellSubStyle","flex","padding","boxShadow","selectedCell","outline","marginInline","backgroundColor","borderBottom","fontWeight","categoryDict","ing","mat","com","fis","sectionOrder","outerDiv","innerDiv","gap","TopControls","sectionState","currentSection","setSection","length","next","findIndex","getNextSection","QuestionsForm","useState","answersState","margin","Separator","sampleSize","App","database","loadDatabase","selectQuestions","view","loadingError","showError","useEffect","readDatabase","then","options","fromEntries","values","includes","validQuestions","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.360f4aab.chunk.js","sourcesContent":["import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\n\nexport const sheetDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type category = typeof sheetDict[keyof typeof sheetDict]\n\nexport type answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n  validated: boolean\n\n  // These are only present for COM questions\n  sub?: string\n  track?: string\n}\n\nexport type QuestionsData = Record<category, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n    lastUpdate: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProject/data/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(\n  db: Database,\n  options: Record<category, number>\n): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [category /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a category <=> exclude \"meta\"\n      .filter(([key]) => (Object.values(sheetDict) as string[]).includes(key))\n      .map(([key, questions]) => {\n        // Select only validated questions\n        const validQuestions = questions.filter((q) => q.validated)\n\n        // Get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(validQuestions.map((v) => v.id))).slice(\n          0,\n          options[key] as number\n        )\n\n        // Return only the questions with a selected ID\n        return [key, validQuestions.filter((q) => resIds.includes(q.id))]\n      })\n  ) as QuestionsData\n}\n","import React from 'react'\n// @ts-expect-error Waiting for DefinitelyTyped PR to be merged: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56687\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { category, Database, Question } from '../utils/database'\n\nimport RenderedText from './Util/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          category,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key}>\n          <h3>Category: {key}</h3>\n          <ul>\n            {questions\n              .filter((q) => q.text || key == 'com')\n              .map((q) => (\n                <div key={key + q.id + (q.sub || '')}>\n                  <RenderedText text={q.text} />\n                  <br />\n                  <p>Valid: {q.validated + ''}</p>\n                  <br />\n                  <RenderedText text={q.answers.a} />\n                  <br />\n                  <RenderedText text={q.answers.b} />\n                  <br />\n                  <RenderedText text={q.answers.c} />\n                  <br />\n                  <RenderedText text={q.answers.d} />\n                  <br />\n                  <RenderedText text={q.answers.e} />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nexport type cssLike = CSS.Properties\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana'\n}\n\nexport function createStyle(...styles: CSS.Properties[]) {\n  return {\n    ...baseStyle,\n    ...styles.reduce((acc, curr) => ({ ...acc, ...curr }), {})\n  }\n}\n\nexport const theme = {\n  primary: '#069',\n  lightBackground: '#F3F3EE'\n}\n","import React from 'react'\nimport { createStyle, cssLike } from '../../utils/style'\n\nconst textStyle = createStyle({\n  fontFamily: ' Arial',\n  fontSize: '9.5pt'\n})\n\ninterface ButtonProps {\n  label: string\n  onClick: () => void\n  style?: cssLike\n  leftIcon?: () => React.Component\n  rightIcon?: () => React.Component\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button onClick={props.onClick}>\n      {props.leftIcon && props.leftIcon()}\n      <span style={textStyle}>{props.label}</span>\n      {props.rightIcon && props.rightIcon()}\n    </button>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\nimport { statePair } from '../utils/types'\nimport { view } from './App'\nimport Button from './Util/Button'\n\nconst divStyle = createStyle({\n  height: '70px',\n  display: 'flex',\n  alignItems: 'baseline',\n  justifyContent: 'space-between'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt',\n  display: 'inline-block'\n})\n\ninterface HeaderProps {\n  viewState: statePair<view>\n}\n\nexport default function Header({ viewState }: HeaderProps) {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n      <Button\n        label=\"Toggle demo view\"\n        onClick={() => {\n          const [currentView, selectView] = viewState\n          if (currentView == 'dbPreview') selectView('TOL-startSec')\n          else selectView('dbPreview')\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function AnswerForm() {\n  return (\n    <div>\n      <p>Placeholder: answer form</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function BottomControls() {\n  return (\n    <div>\n      <p>Placeholder: bottom controls</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function QuestionView() {\n  return (\n    <div>\n      <p>Placeholder: question header, question text</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { answerLetter, category, QuestionsData } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData } from '../App'\n\nconst defaultBorder = 'thin solid #606060'\n\nconst barStyle = createStyle({\n  display: 'flex',\n  fontSize: '9.5pt',\n  textDecoration: 'none',\n  color: theme.primary\n})\n\ninterface RecapBarProps {\n  sectionAnswers: AnswersData[category]\n  currentQuestionIndexState: statePair<number>\n  sectionQuestions: QuestionsData[category]\n}\nexport default function RecapBar(props: RecapBarProps) {\n  return (\n    <a style={barStyle} href=\"#\">\n      {props.sectionQuestions.map((q, i) => {\n        const answer = props.sectionAnswers.find(\n          (a) => a.id == q.id && (q.sub ? q.sub == a.sub : true)\n        )\n        return (\n          <AnswerCell\n            key={i}\n            index={i + ''}\n            letter={answer?.letter}\n            flagged={answer?.flagged || false}\n            onClick={() => {\n              props.currentQuestionIndexState[1](i)\n            }}\n            selected={props.currentQuestionIndexState[0] == i}\n          />\n        )\n      })}\n    </a>\n  )\n}\n\nconst cellContainerStyle = createStyle({\n  display: 'flex',\n  flexShrink: 1,\n  flexDirection: 'column',\n  alignContent: 'baseline',\n  textAlign: 'center',\n  width: '4em'\n})\n\nconst cellSubStyle = createStyle({\n  flex: 1,\n  padding: '0.3em',\n  boxShadow:\n    '1px 0 0 0 #606060, 0 1px 0 0 #606060, 1px 1px 0 0 #606060, /* corner */ 1px 0 0 0 #606060 inset, 0 1px 0 0 #606060 inset'\n})\n\nconst selectedCell = createStyle({\n  outline: `5px solid ${theme.primary}`,\n  marginInline: '4px',\n  color: 'black'\n})\n\ninterface AnswerCellProps {\n  index: string\n  letter: answerLetter | undefined\n  flagged: boolean\n  onClick: () => void\n  selected: boolean\n}\nfunction AnswerCell(props: AnswerCellProps) {\n  return (\n    <div\n      style={{\n        ...cellContainerStyle,\n        backgroundColor: theme.lightBackground,\n        ...(props.selected ? selectedCell : {})\n      }}\n      onClick={props.onClick}\n    >\n      <div\n        style={{\n          ...cellSubStyle,\n          borderBottom: defaultBorder,\n          ...(props.selected ? { fontWeight: 'bold' } : {})\n        }}\n      >\n        <span>{props.index}</span>\n      </div>\n      <div\n        style={{\n          ...cellSubStyle,\n          backgroundColor: props.flagged ? 'yellow' : 'white'\n        }}\n      >\n        <span>\n          {props.letter || 'jjj'}\n          {props.flagged && '?'}\n        </span>\n      </div>\n    </div>\n  )\n}\n","import { category } from './database'\n\nexport const categoryDict: Record<category, string> = {\n  ing: 'Inglese',\n  mat: 'Matematica',\n  com: 'Comprensione',\n  fis: 'Fisica'\n}\n\nconst sectionOrder: category[] = ['ing', 'mat', 'com', 'fis']\nexport function getNextSection(currentSection: category) {\n  const i = sectionOrder.findIndex((e) => e == currentSection)\n  return sectionOrder[i + 1]\n}\n","import React from 'react'\nimport { categoryDict, getNextSection } from '../../utils/constants'\nimport { category, QuestionsData } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport Button from '../Util/Button'\n\nconst outerDiv = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst innerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'baseline',\n  flexDirection: 'row',\n  gap: '15px',\n  fontSize: '11pt'\n})\n\ninterface TopControlsProps {\n  sectionState: statePair<category>\n  viewState: statePair<view>\n  questions: QuestionsData\n  answers: AnswersData\n}\n\nexport default function TopControls(props: TopControlsProps) {\n  const [currentSection, setSection] = props.sectionState\n\n  return (\n    <div style={outerDiv}>\n      <div style={innerDiv}>\n        <div>\n          <p>\n            Sezione: {categoryDict[currentSection]} <br />\n            Riposte: {props.answers[currentSection].length} /{' '}\n            {props.questions[currentSection].length} (\n            {props.answers[currentSection].reduce(\n              (acc, curr) => acc + (curr.flagged ? 1 : 0),\n              0\n            )}{' '}\n            da rivedere)\n          </p>\n        </div>\n        <Button\n          label=\"Chiudi sezione\"\n          onClick={() => {\n            const next = getNextSection(currentSection)\n            if (next) setSection(next)\n            else props.viewState[1]('TOL-end')\n          }}\n        />\n      </div>\n      <p>Placeholder: timer</p>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { category, QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  questions: QuestionsData\n  viewState: statePair<view>\n  sectionState: statePair<category>\n  answersState: statePair<AnswersData>\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  const currentQuestionIndexState = useState(0),\n    [currentSection, setSection] = props.sectionState\n\n  return (\n    <div hidden={!props.questions}>\n      <TopControls\n        sectionState={[\n          currentSection,\n          (...args) => {\n            currentQuestionIndexState[1](0)\n            setSection(...args)\n          }\n        ]}\n        viewState={props.viewState}\n        questions={props.questions}\n        answers={props.answersState[0]}\n      />\n      <RecapBar\n        currentQuestionIndexState={currentQuestionIndexState}\n        sectionAnswers={props.answersState[0][props.sectionState[0]]}\n        sectionQuestions={props.questions[props.sectionState[0]]}\n      />\n      <QuestionView />\n      <AnswerForm />\n      <BottomControls />\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle, theme } from '../../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  answerLetter,\n  category,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Util/Separator'\n\nconst sampleSize: Record<category, number> = {\n  ing: 30,\n  mat: 25,\n  com: 1, // We're counting IDs, so it'll be only one (worth 5 questions)\n  fis: 5\n}\n\nexport type view = 'dbPreview' | 'TOL-startSec' | 'TOL-end'\n\ninterface Answer {\n  id: string\n  sub?: string\n  letter: answerLetter | undefined\n  flagged: boolean\n}\n\nexport type AnswersData = Record<category, Answer[]>\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, selectQuestions] = useState<QuestionsData>()\n  const [view, selectView] = useState<view>('dbPreview')\n  const sectionState = useState<category>('ing')\n  const answersState = useState<AnswersData>({\n    ing: [],\n    mat: [],\n    com: [],\n    fis: []\n  })\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          selectQuestions(selectRandomQuestions(db, sampleSize))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header viewState={[view, selectView]} />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {/* <p>App start</p> */}\n\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : questions ? (\n        <QuestionsForm\n          questions={questions as QuestionsData}\n          viewState={[view, selectView]}\n          sectionState={sectionState}\n          answersState={answersState}\n        />\n      ) : undefined}\n      {/* <p>App end</p> */}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}