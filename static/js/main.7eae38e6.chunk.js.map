{"version":3,"sources":["utils/database.ts","components/ErrorView.tsx","utils/style.ts","components/Header.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Separator.tsx","components/App.tsx","index.tsx"],"names":["a","getPlaceholderQuestions","sample","id","text","answers","b","c","d","correct","arr","i","push","ing","mat","com","fis","ErrorView","hidden","display","internal","baseStyle","fontFamily","createStyle","style","divStyle","height","textStyle","fontSize","Header","AnswerForm","BottomControls","QuestionView","RecapBar","TopControls","QuestionsForm","props","questions","Object","entries","map","key","value","length","join","backgroundColor","color","margin","Separator","App","useState","loadQuestions","loadingError","showError","useEffect","getRandomQuestions","then","catch","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAWO,sBAAAA,EAAA,+EACEC,KADF,4C,sBAIP,SAASA,IAcP,IAbA,IAAMC,EAAmB,CACrBC,GAAI,MACJC,KAAM,MACNC,QAAS,CACPL,EAAG,WACHM,EAAG,WACHC,EAAG,WACHC,EAAG,YAELC,QAAS,KAEXC,EAAM,GAECC,EAAI,EAAGA,EAAI,EAAGA,IAAKD,EAAIE,KAAKV,GAErC,MAAO,CACLW,IAAKH,EACLI,IAAKJ,EACLK,IAAKL,EACLM,IAAKN,G,WC3BM,SAASO,EAAT,GAIK,IAHlBC,EAGiB,EAHjBA,OACAC,EAEiB,EAFjBA,QACAC,EACiB,EADjBA,SAEA,OACE,sBAAKF,OAAQA,EAAb,UACE,6BAAKC,IACL,qCAAaC,EAAW,Q,WCdxBC,EAA4B,CAChCC,WAAY,WAGP,SAASC,EAAYC,GAC1B,OAAO,2BAAKH,GAAcG,GAGrB,ICPDC,EAAWF,EAAY,CAC3BG,OAAQ,SAGJC,EAAYJ,EAAY,CAC5BK,SAAU,SAGG,SAASC,IACtB,OACE,qBAAKL,MAAOC,EAAZ,SACE,oBAAID,MAAOG,EAAX,gECZS,SAASG,IACtB,OACE,8BACE,2DCHS,SAASC,IACtB,OACE,8BACE,+DCHS,SAASC,IACtB,OACE,8BACE,8ECHS,SAASC,IACtB,OACE,8BACE,yDCHS,SAASC,IACtB,OACE,8BACE,yFCMS,SAASC,EAAcC,GACpC,OACE,sBAAKlB,QAASkB,EAAMC,UAApB,UACE,+BACGD,EAAMC,WACLC,OAAOC,QAAQH,EAAMC,WAClBG,KAAI,mCAAEC,EAAF,KAAOC,EAAP,qBAAqBD,EAArB,aAA6BC,EAAMC,WACvCC,KAAK,QAEZ,cAACV,EAAD,IACA,cAACD,EAAD,IACA,cAACD,EAAD,IACA,cAACF,EAAD,IACA,cAACC,EAAD,OCrBN,IAAMN,EAAWF,EAAY,CAC3BG,OAAQ,OACRmB,gBRMS,SQJLlB,EAAYJ,EAAY,CAC5BuB,MAAO,QACPC,OAAQ,YACRnB,SAAU,UAMG,SAASoB,EAAUZ,GAChC,OACE,qBAAKZ,MAAOC,EAAZ,SACE,mBAAGD,MAAOG,EAAV,SAAsBS,EAAMhC,MAAQ,OCZ3B,SAAS6C,IACtB,MAAmCC,qBAAnC,mBAAOb,EAAP,KAAkBc,EAAlB,KACA,EAAkCD,mBAA+B,IAAjE,mBAAOE,EAAP,KAAqBC,EAArB,KAcA,OAZAC,qBAAU,WACJjB,GXDD,WAAP,+BWEMkB,GACGC,KAAKL,GACLM,OAAM,SAACC,GACNL,EAAU,CACR,iFACAK,UAMR,gCACE,cAAC7B,EAAD,IACA,cAACmB,EAAD,CAAW5C,KAAK,mCAChB,cAACa,EAAD,CACEC,QAASkC,EAAa,GACtBjC,QAASiC,EAAa,IAAM,GAC5BhC,SAAUgC,EAAa,KAGzB,cAACjB,EAAD,CAAeE,UAAWA,IAE1B,cAACW,EAAD,CAAW5C,KAAK,yCC9BtBuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,W","file":"static/js/main.7eae38e6.chunk.js","sourcesContent":["type category = 'ing' | 'mat' | 'com' | 'fis'\n\ninterface Question {\n  id: string\n  text: string\n  answers: Record<'a' | 'b' | 'c' | 'd', string>\n  correct: 'a' | 'b' | 'c' | 'd'\n}\n\nexport type QuestionsData = Record<category, Question[]>\n\nexport async function getRandomQuestions(): Promise<QuestionsData> {\n  return getPlaceholderQuestions()\n}\n\nfunction getPlaceholderQuestions() {\n  const sample: Question = {\n      id: '123',\n      text: 'abc',\n      answers: {\n        a: 'Answer A',\n        b: 'Answer B',\n        c: 'Answer C',\n        d: 'Answer D'\n      },\n      correct: 'd'\n    },\n    arr = []\n\n  for (let i = 0; i < 5; i++) arr.push(sample)\n\n  return {\n    ing: arr,\n    mat: arr,\n    com: arr,\n    fis: arr\n  }\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana'\n}\n\nexport function createStyle(style: CSS.Properties) {\n  return { ...baseStyle, ...style }\n}\n\nexport const theme = {\n  primary: '#069'\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\n\nconst divStyle = createStyle({\n  height: '70px'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt'\n})\n\nexport default function Header() {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function AnswerForm() {\n  return (\n    <div>\n      <p>Placeholder: answer form</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function BottomControls() {\n  return (\n    <div>\n      <p>Placeholder: bottom controls</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function QuestionView() {\n  return (\n    <div>\n      <p>Placeholder: question header, question text</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function RecapBar() {\n  return (\n    <div>\n      <p>Placeholder: recap bar</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function TopControls() {\n  return (\n    <div>\n      <p>Placeholder: \"sezione\", \"risposte\", end section, clock</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { QuestionsData } from '../../utils/database'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  questions?: QuestionsData\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  return (\n    <div hidden={!props.questions}>\n      <code>\n        {props.questions &&\n          Object.entries(props.questions)\n            .map(([key, value]) => `${key}: ${value.length}`)\n            .join('\\n')}\n      </code>\n      <TopControls />\n      <RecapBar />\n      <QuestionView />\n      <AnswerForm />\n      <BottomControls />\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle, theme } from '../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { getRandomQuestions, QuestionsData } from '../utils/database'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Separator'\n\nexport default function App() {\n  const [questions, loadQuestions] = useState<QuestionsData>()\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (questions)\n      getRandomQuestions()\n        .then(loadQuestions)\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the questions data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {/* <p>App start</p> */}\n      <QuestionsForm questions={questions} />\n      {/* <p>App end</p> */}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}