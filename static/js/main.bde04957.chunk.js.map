{"version":3,"sources":["utils/database.ts","components/Util/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","utils/style.ts","components/Util/Button.tsx","components/Header.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","utils/constants.ts","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Util/Separator.tsx","components/App.tsx","index.tsx"],"names":["sheetDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","RenderedText","text","DBPreview","Object","entries","filter","map","key","questions","q","validated","answers","b","c","d","e","id","ErrorView","hidden","display","internal","baseStyle","fontFamily","createStyle","style","textStyle","fontSize","Button","props","onClick","leftIcon","label","rightIcon","divStyle","height","alignItems","justifyContent","Header","viewState","currentView","selectView","AnswerForm","BottomControls","QuestionView","RecapBar","categoryDict","ing","mat","com","fis","sectionOrder","outerDiv","innerDiv","flexDirection","gap","TopControls","sectionState","currentSection","setSection","length","reduce","acc","curr","flagged","next","i","findIndex","getNextSection","QuestionsForm","answersState","backgroundColor","color","margin","Separator","sampleSize","App","useState","database","loadDatabase","selectQuestions","view","loadingError","showError","useEffect","readDatabase","then","options","fromEntries","values","includes","validQuestions","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bde04957.chunk.js","sourcesContent":["import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\n\nexport const sheetDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type category = typeof sheetDict[keyof typeof sheetDict]\n\nexport type answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n  validated: boolean\n\n  // These are only present for COM questions\n  sub?: string\n  track?: string\n}\n\nexport type QuestionsData = Record<category, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n    lastUpdate: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProject/data/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(\n  db: Database,\n  options: Record<category, number>\n): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [category /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a category <=> exclude \"meta\"\n      .filter(([key]) => (Object.values(sheetDict) as string[]).includes(key))\n      .map(([key, questions]) => {\n        // Select only validated questions\n        const validQuestions = questions.filter((q) => q.validated)\n\n        // Get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(validQuestions.map((v) => v.id))).slice(\n          0,\n          options[key] as number\n        )\n\n        // Return only the questions with a selected ID\n        return [key, validQuestions.filter((q) => resIds.includes(q.id))]\n      })\n  ) as QuestionsData\n}\n","import React from 'react'\n// @ts-expect-error Waiting for DefinitelyTyped PR to be merged: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56687\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { category, Database, Question } from '../utils/database'\n\nimport RenderedText from './Util/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          category,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key}>\n          <h3>Category: {key}</h3>\n          <ul>\n            {questions\n              .filter((q) => q.text || key == 'com')\n              .map((q) => (\n                <div key={key + q.id}>\n                  <RenderedText text={q.text} />\n                  <br />\n                  <p>Valid: {q.validated + ''}</p>\n                  <br />\n                  <RenderedText text={q.answers.a} />\n                  <br />\n                  <RenderedText text={q.answers.b} />\n                  <br />\n                  <RenderedText text={q.answers.c} />\n                  <br />\n                  <RenderedText text={q.answers.d} />\n                  <br />\n                  <RenderedText text={q.answers.e} />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nexport type cssLike = CSS.Properties\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana'\n}\n\nexport function createStyle(style: CSS.Properties) {\n  return { ...baseStyle, ...style }\n}\n\nexport const theme = {\n  primary: '#069'\n}\n","import React from 'react'\nimport { createStyle, cssLike } from '../../utils/style'\n\nconst textStyle = createStyle({\n  fontFamily: ' Arial',\n  fontSize: '9.5pt'\n})\n\ninterface ButtonProps {\n  label: string\n  onClick: () => void\n  style?: cssLike\n  leftIcon?: () => React.Component\n  rightIcon?: () => React.Component\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button onClick={props.onClick}>\n      {props.leftIcon && props.leftIcon()}\n      <span style={textStyle}>{props.label}</span>\n      {props.rightIcon && props.rightIcon()}\n    </button>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\nimport { statePair } from '../utils/types'\nimport { view } from './App'\nimport Button from './Util/Button'\n\nconst divStyle = createStyle({\n  height: '70px',\n  display: 'flex',\n  alignItems: 'baseline',\n  justifyContent: 'space-between'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt',\n  display: 'inline-block'\n})\n\ninterface HeaderProps {\n  viewState: statePair<view>\n}\n\nexport default function Header({ viewState }: HeaderProps) {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n      <Button\n        label=\"Toggle demo view\"\n        onClick={() => {\n          const [currentView, selectView] = viewState\n          if (currentView == 'dbPreview') selectView('TOL-startSec')\n          else selectView('dbPreview')\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function AnswerForm() {\n  return (\n    <div>\n      <p>Placeholder: answer form</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function BottomControls() {\n  return (\n    <div>\n      <p>Placeholder: bottom controls</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function QuestionView() {\n  return (\n    <div>\n      <p>Placeholder: question header, question text</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function RecapBar() {\n  return (\n    <div>\n      <p>Placeholder: recap bar</p>\n    </div>\n  )\n}\n","import { category } from './database'\n\nexport const categoryDict: Record<category, string> = {\n  ing: 'Inglese',\n  mat: 'Matematica',\n  com: 'Comprensione',\n  fis: 'Fisica'\n}\n\nconst sectionOrder: category[] = ['ing', 'mat', 'com', 'fis']\nexport function getNextSection(currentSection: category) {\n  const i = sectionOrder.findIndex((e) => e == currentSection)\n  return sectionOrder[i + 1]\n}\n","import React from 'react'\nimport { categoryDict, getNextSection } from '../../utils/constants'\nimport { category, QuestionsData } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport Button from '../Util/Button'\n\nconst outerDiv = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst innerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'baseline',\n  flexDirection: 'row',\n  gap: '15px',\n  fontSize: '11pt'\n})\n\ninterface TopControlsProps {\n  sectionState: statePair<category>\n  viewState: statePair<view>\n  questions: QuestionsData\n  answers: AnswersData\n}\n\nexport default function TopControls(props: TopControlsProps) {\n  const [currentSection, setSection] = props.sectionState\n\n  return (\n    <div style={outerDiv}>\n      <div style={innerDiv}>\n        <div>\n          <p>\n            Sezione: {categoryDict[currentSection]} <br />\n            Riposte: {props.answers[currentSection].length} /{' '}\n            {props.questions[currentSection].length} (\n            {props.answers[currentSection].reduce(\n              (acc, curr) => acc + (curr.flagged ? 1 : 0),\n              0\n            )}{' '}\n            da rivedere)\n          </p>\n        </div>\n        <Button\n          label=\"Chiudi sezione\"\n          onClick={() => {\n            const next = getNextSection(currentSection)\n            if (next) setSection(next)\n            else props.viewState[1]('TOL-end')\n          }}\n        />\n      </div>\n      <p>Placeholder: timer</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { category, QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  questions: QuestionsData\n  viewState: statePair<view>\n  sectionState: statePair<category>\n  answersState: statePair<AnswersData>\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  return (\n    <div hidden={!props.questions}>\n      <TopControls\n        sectionState={props.sectionState}\n        viewState={props.viewState}\n        questions={props.questions}\n        answers={props.answersState[0]}\n      />\n      <RecapBar />\n      <QuestionView />\n      <AnswerForm />\n      <BottomControls />\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle, theme } from '../../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  answerLetter,\n  category,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Util/Separator'\n\nconst sampleSize: Record<category, number> = {\n  ing: 30,\n  mat: 25,\n  com: 1, // We're counting IDs, so it'll be only one (worth 5 questions)\n  fis: 5\n}\n\nexport type view = 'dbPreview' | 'TOL-startSec' | 'TOL-end'\n\ninterface Answer {\n  id: number\n  sub?: number\n  letter: answerLetter | '?'\n  flagged: boolean\n}\n\nexport type AnswersData = Record<category, Answer[]>\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, selectQuestions] = useState<QuestionsData>()\n  const [view, selectView] = useState<view>('dbPreview')\n  const sectionState = useState<category>('ing')\n  const answersState = useState<AnswersData>({\n    ing: [],\n    mat: [],\n    com: [],\n    fis: []\n  })\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          selectQuestions(selectRandomQuestions(db, sampleSize))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header viewState={[view, selectView]} />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {/* <p>App start</p> */}\n\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : questions ? (\n        <QuestionsForm\n          questions={questions as QuestionsData}\n          viewState={[view, selectView]}\n          sectionState={sectionState}\n          answersState={answersState}\n        />\n      ) : undefined}\n      {/* <p>App end</p> */}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}