{"version":3,"sources":["utils/constants.ts","utils/database.ts","components/Util/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","utils/style.ts","components/Util/Button.tsx","components/Header.tsx","components/InfoView/InfoEnd.tsx","components/InfoView/InfoStart.tsx","components/InfoView/InfoView.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionHeader.tsx","components/Util/CollapsibleText.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","components/QuestionsForm/SectionRecap.tsx","components/QuestionsForm/SectionStart.tsx","components/QuestionsForm/Timer.tsx","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Util/Separator.tsx","components/App.tsx","index.tsx"],"names":["sectionInfo","ing","name","order","sample","minutes","score","mat","com","sub","fis","getSectionName","key","sheetDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","RenderedText","text","DBPreview","Object","entries","filter","map","questions","q","validated","answers","b","c","d","e","id","ErrorView","hidden","display","internal","theme","baseStyle","fontFamily","color","createStyle","styles","reduce","acc","curr","textStyle","fontSize","alignItems","leftIcon","float","marginRight","rightIcon","marginLeft","Button","props","style","onClick","label","divStyle","height","justifyContent","Header","viewState","currentView","selectView","flexDirection","tableDivStyle","alignSelf","tableStyle","borderSpacing","tableCell","padding","paddingInline","textAlign","border","tableHeader","fontWeight","backgroundColor","InfoEnd","correctionGrid","fromEntries","section","secQuestions","correct","notGiven","wrong","forEach","answer","find","letter","total","length","Math","round","correction","testPassed","tengPassed","sort","toFixed","InfoStart","startTest","InfoView","view","baseText","AnswerForm","letterState","tmpAnswerState","currentQuestion","RadioRow","undefined","verticalAlign","spanStyle","width","toUpperCase","type","value","checked","onChange","event","target","controlsDiv","flex","gap","paddingBlock","labelStyle","BottomControls","tmpFlaggedState","flagged","setFlagged","updateAnswer","containerStyle","leftContainer","rightContainer","pStyle","flexGrow","flexShrink","minWidth","iconStyle","QuestionHeader","questionIndex","currentAnswer","shiftQuestionIndex","outerDivStyle","margin","collapsibleStyle","background","CollapsibleText","useState","startOpen","isOpen","setOpen","trigger","open","easing","longText","QuestionView","question","track","attachments","join","barStyle","textDecoration","RecapBar","active","href","sectionQuestions","i","sectionAnswers","AnswerCell","index","currentQuestionIndexState","selected","cellContainerStyle","alignContent","cellSubStyle","boxShadow","selectedCell","outline","marginInline","borderBottom","paddingTop","paddingBottom","SectionRecap","info","floor","secondsUsed","toLocaleString","minimumIntegerDigits","goToNextSection","SectionStart","startSection","borderRadius","expiring","Timer","timer","hours","seconds","expired","outerDiv","innerDiv","TopControls","currentSection","closeSection","timerExpired","QuestionsForm","qIndex","originalSetQIndex","tmpTimerExpiredState","sectionState","setSection","setView","answersState","setAnswers","timeRecordState","timeRecord","setTimeRecord","setQIndex","nextAnswers","nextTR","restart","Date","shiftQIndex","offset","next","useTimer","expiryTimestamp","getTimerExpDate","autoStart","onExpire","start","nextSection","sortedInfo","findIndex","getNextSection","res","setSeconds","getSeconds","Separator","App","database","loadDatabase","setQuestions","loadingError","showError","useEffect","readDatabase","then","values","includes","validQuestions","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","startsWith","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2151b53f.chunk.js","sourcesContent":["import { section } from './database'\n\ninterface sectionInfoElement {\n  /** The readable name of the section */\n  name: string\n  /** The order in which the section should be tested */\n  order: number\n  /** The number of questions that should be selected */\n  sample: number\n  /** The number of sub-questions that should be selected (only applies to 'com') */\n  sub?: number\n  /** The maximum number of minutes that the user can use to complete a section */\n  minutes: number\n  /** The maximum number of points the section can account for (test total is {@link testTotalScore}) */\n  score: number\n}\n\nexport const sectionInfo: Record<section, sectionInfoElement> = {\n  ing: {\n    name: 'Inglese',\n    order: 1,\n    sample: 30,\n    minutes: 15,\n    score: 10\n  },\n  mat: {\n    name: 'Matematica',\n    order: 2,\n    sample: 25,\n    minutes: 75,\n    score: 65\n  },\n  com: {\n    name: 'Comprensione',\n    order: 3,\n    sample: 1,\n    sub: 5,\n    minutes: 10,\n    score: 15\n  },\n  fis: {\n    name: 'Fisica',\n    order: 4,\n    sample: 5,\n    minutes: 10,\n    score: 10\n  }\n}\n\nexport const testTotalScore = 100\n/** Minimum score to pass the test */\nexport const testPassThreshold = 60\n/** Minimum number of correct questions to pass the test */\nexport const tengPassThreshold = 24\n\nexport function getSectionName(key: section) {\n  return sectionInfo[key].name\n}\n\nexport function getNextSection(currentSection: section): section | undefined {\n  const sortedInfo = Object.entries(sectionInfo).sort(\n    (a, b) => a[1].order - b[1].order\n  ) as [section, sectionInfoElement][]\n  const i = sortedInfo.findIndex((e) => e[0] == currentSection)\n  return (sortedInfo[i + 1] || [])[0]\n}\n","import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\nimport { sectionInfo } from './constants'\n\nexport const sheetDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type section = typeof sheetDict[keyof typeof sheetDict]\n\nexport type answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n  validated: boolean\n\n  // These are only present for COM questions\n  sub?: string\n  track?: string\n}\n\nexport type QuestionsData = Record<section, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProjectData/main/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(db: Database): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [section /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a section <=> exclude \"meta\"\n      .filter(([key]) => (Object.values(sheetDict) as string[]).includes(key))\n      .map(([key, questions]) => {\n        // Select only validated questions\n        const validQuestions = questions.filter((q) => q.validated)\n\n        // Get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(validQuestions.map((v) => v.id))).slice(\n          0,\n          sectionInfo[key].sample\n        )\n\n        // Return only the questions with a selected ID\n        return [key, validQuestions.filter((q) => resIds.includes(q.id))]\n      })\n  ) as QuestionsData\n}\n","import React from 'react'\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { section, Database, Question } from '../utils/database'\n\nimport RenderedText from './Util/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          section,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key}>\n          <h3>Section: {key}</h3>\n          <ul>\n            {questions\n              .filter((q) => q.text || key == 'com')\n              .map((q) => (\n                <div key={key + q.id + (q.sub || '')}>\n                  <RenderedText text={q.text} />\n                  <br />\n                  <p>Valid: {q.validated + ''}</p>\n                  <br />\n                  <RenderedText text={q.answers.a} />\n                  <br />\n                  <RenderedText text={q.answers.b} />\n                  <br />\n                  <RenderedText text={q.answers.c} />\n                  <br />\n                  <RenderedText text={q.answers.d} />\n                  <br />\n                  <RenderedText text={q.answers.e} />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nexport type cssLike = CSS.Properties\n\nexport const theme = {\n  lightBackground: '#F3F3EE',\n  lightBorder: '#D5DFE4',\n  primary: '#069',\n  questionYellow: 'yellow',\n  questionGreen: '#00D700',\n  softBlack: '#333',\n  timerGreen: '#009527',\n  timerRed: 'red'\n}\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana',\n  color: theme.softBlack\n}\n\nexport function createStyle(...styles: CSS.Properties[]) {\n  return {\n    ...baseStyle,\n    ...styles.reduce((acc, curr) => ({ ...acc, ...curr }), {})\n  }\n}\n","import React from 'react'\nimport { createStyle, cssLike } from '../../utils/style'\n\nconst textStyle = createStyle({\n  fontFamily: ' Arial',\n  fontSize: '9.5pt',\n  alignItems: 'center'\n})\n\nconst leftIcon = createStyle({\n  float: 'left',\n  marginRight: '2px'\n})\nconst rightIcon = createStyle({\n  float: 'right',\n  marginLeft: '2px'\n})\n\ninterface ButtonProps {\n  label: string\n  onClick: () => void\n  style?: cssLike\n  leftIcon?: () => JSX.Element\n  rightIcon?: () => JSX.Element\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button style={textStyle} onClick={props.onClick}>\n      <span style={leftIcon}>{props.leftIcon && props.leftIcon()}</span>\n      <span>{props.label}</span>\n      <span style={rightIcon}>{props.rightIcon && props.rightIcon()}</span>\n    </button>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\nimport { statePair } from '../utils/types'\nimport { view } from './App'\nimport Button from './Util/Button'\n\nconst divStyle = createStyle({\n  height: '70px',\n  display: 'flex',\n  alignItems: 'baseline',\n  justifyContent: 'space-between'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt',\n  display: 'inline-block'\n})\n\ninterface HeaderProps {\n  viewState: statePair<view>\n}\n\nexport default function Header({ viewState }: HeaderProps) {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n      <Button\n        label=\"Toggle demo view\"\n        onClick={() => {\n          const [currentView, selectView] = viewState\n          if (currentView == 'dbPreview') selectView('INFO-start')\n          else selectView('dbPreview')\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport {\n  getSectionName,\n  sectionInfo,\n  tengPassThreshold,\n  testPassThreshold,\n  testTotalScore\n} from '../../utils/constants'\nimport { Question, QuestionsData, section } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { AnswersData } from '../App'\n\nconst divStyle = createStyle({\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  fontSize: '11pt'\n})\n\nconst tableDivStyle = createStyle({ alignSelf: 'center' })\n\nconst tableStyle = createStyle({ borderSpacing: 0 })\n\nconst tableCell = createStyle({\n  padding: '5px',\n  paddingInline: '10px',\n  textAlign: 'center',\n  border: `thin solid ${theme.lightBorder}`,\n  borderSpacing: '0px',\n  fontSize: '9.5pt'\n})\n\nconst tableHeader = createStyle(tableCell, {\n  fontWeight: 'bold',\n  backgroundColor: theme.lightBackground,\n  textAlign: 'left'\n})\n\ninterface InfoEndProps {\n  answers: AnswersData\n  questions: QuestionsData\n}\nexport default function InfoEnd(props: InfoEndProps) {\n  const { answers, questions } = props\n\n  const correctionGrid = Object.fromEntries(\n    (Object.entries(questions) as [section, Question[]][]).map(\n      ([section, secQuestions]) => {\n        let correct = 0,\n          notGiven = 0,\n          wrong = 0\n\n        secQuestions.forEach((q) => {\n          const answer = answers[section].find(\n            (a) => a && a.id == q.id && a.sub == q.sub\n          )\n\n          if (!answer || !answer.letter) notGiven++\n          else if (answer.letter == q.correct) correct++\n          else wrong++\n        })\n\n        return [\n          section,\n          {\n            total: secQuestions.length,\n            correct,\n            notGiven,\n            wrong\n          }\n        ]\n      }\n    )\n  )\n\n  const score =\n    Math.round(\n      (\n        Object.entries(correctionGrid) as [\n          section,\n          typeof correctionGrid[string]\n        ][]\n      )\n        .map(([section, correction]) =>\n          correction.total\n            ? ((correction.correct - 0.25 * correction.wrong) /\n                correction.total) *\n              sectionInfo[section].score\n            : 0\n        )\n        .reduce((acc, curr) => acc + curr, 0) * 100\n    ) / 100\n  const testPassed = score >= testPassThreshold,\n    tengPassed = correctionGrid.ing?.correct >= tengPassThreshold\n\n  return (\n    <div style={divStyle}>\n      <p>La simulazione è finita, questo è il punteggio: </p>\n      <div style={tableDivStyle}>\n        <table style={tableStyle}>\n          <tr>\n            <td></td>\n            <td style={tableHeader}>N° quesiti</td>\n            <td style={tableHeader}>Esatti</td>\n            <td style={tableHeader}>Errati</td>\n            <td style={tableHeader}>Senza risposta</td>\n          </tr>\n          {(\n            Object.entries(correctionGrid) as [\n              section,\n              typeof correctionGrid[section]\n            ][]\n          )\n            .sort((a, b) => sectionInfo[a[0]].order - sectionInfo[b[0]].order)\n            .map(([section, correction]) => (\n              <tr key={section}>\n                <td style={tableHeader}>{getSectionName(section)}</td>\n                <td style={tableCell}>{correction.total}</td>\n                <td style={tableCell}>{correction.correct}</td>\n                <td style={tableCell}>{correction.wrong}</td>\n                <td style={tableCell}>{correction.notGiven}</td>\n              </tr>\n            ))}\n        </table>\n      </div>\n      <p>\n        Punteggio calcolato: {score.toFixed(2)} / {testTotalScore}\n      </p>\n      <p>\n        Esito:{' '}\n        {testPassed\n          ? `Superato${!tengPassed ? ' (OFA TENG)' : ''}`\n          : `Non superato ${\n              !tengPassed ? '(OFA TEST + OFA TENG)' : '(OFA TEST)'\n            }`}\n      </p>\n    </div>\n  )\n}\n","import React from 'react'\nimport Button from '../Util/Button'\n\ninterface InfoStartProps {\n  startTest: () => void\n}\nexport default function InfoStart(props: InfoStartProps) {\n  return (\n    <div>\n      <p>\n        Questa è una serie di informazioni veramente interessanti sulla demo,\n        che prima o poi mi metterò a scrivere\n      </p>\n      <Button label=\"Inizia il test\" onClick={props.startTest} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport InfoEnd from './InfoEnd'\nimport InfoStart from './InfoStart'\n\ninterface InfoViewProps {\n  answers: AnswersData\n  questions: QuestionsData\n  viewState: statePair<view>\n}\nexport default function InfoView(props: InfoViewProps) {\n  const view = props.viewState[0]\n\n  return view == 'INFO-start' ? (\n    <InfoStart\n      startTest={() => {\n        props.viewState[1]('TOL-startSec')\n      }}\n    />\n  ) : view == 'INFO-end' ? (\n    <InfoEnd answers={props.answers} questions={props.questions} />\n  ) : (\n    <div />\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport RenderedText from '../Util/RenderedText'\n\nconst baseText = createStyle({\n  fontSize: '11pt'\n})\n\ninterface AnswerFormProps {\n  currentAnswer: Answer | undefined\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n}\n\nexport default function AnswerForm(props: AnswerFormProps) {\n  const letterState = props.tmpAnswerState\n\n  if (!props.currentQuestion)\n    return (\n      <span style={baseText}>\n        <br />\n        No answers to display ¯\\_(ツ)_/¯\n      </span>\n    )\n\n  return (\n    <div>\n      <RadioRow\n        letter=\"a\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.a}\n      />\n      <RadioRow\n        letter=\"b\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.b}\n      />\n      <RadioRow\n        letter=\"c\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.c}\n      />\n      <RadioRow\n        letter=\"d\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.d}\n      />\n      <RadioRow\n        letter=\"e\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.e}\n      />\n      <RadioRow letter={undefined} letterState={letterState} text=\"Non so\" />\n    </div>\n  )\n}\n\ninterface RadioRowProps {\n  letter: Answer['letter']\n  letterState: statePair<Answer['letter']>\n  text: string\n}\nfunction RadioRow(props: RadioRowProps) {\n  const textStyle = createStyle({\n    fontWeight: 'bold',\n    textAlign: 'center',\n    verticalAlign: 'middle',\n    paddingInline: '10px'\n  })\n  const spanStyle = createStyle({\n    width: '2em',\n    float: 'left',\n    display: 'inline-block'\n  })\n\n  return (\n    <tr style={baseText}>\n      <label>\n        <td style={textStyle}>\n          <span style={spanStyle}>{props.letter?.toUpperCase() || '?'} </span>\n          <input\n            type=\"radio\"\n            value={props.letter}\n            checked={props.letter == props.letterState[0]}\n            onChange={(event) => {\n              // @ts-expect-error The value is correct\n              props.letterState[1](event.target.value || undefined)\n            }}\n          />\n        </td>\n        <td>\n          <RenderedText text={props.text} />\n        </td>\n      </label>\n    </tr>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport { FaCheck } from 'react-icons/fa'\nimport Button from '../Util/Button'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport { Question } from '../../utils/database'\n\nconst controlsDiv = createStyle({\n  display: 'flex',\n  flex: 1,\n  justifyContent: 'flex-end',\n  fontSize: '9.5pt',\n  verticalAlign: 'middle',\n  gap: '10px',\n  paddingBlock: '10px'\n})\n\nconst labelStyle = createStyle({ display: 'flex', alignItems: 'center' })\n\ninterface BottomControlsProps {\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n  tmpFlaggedState: statePair<boolean>\n  updateAnswer: (updatedAnswer: Answer) => void\n}\nexport default function BottomControls(props: BottomControlsProps) {\n  const [flagged, setFlagged] = props.tmpFlaggedState\n\n  if (!props.currentQuestion) return <div style={controlsDiv} />\n\n  return (\n    <div style={controlsDiv}>\n      <label style={labelStyle}>\n        <input\n          type=\"checkbox\"\n          checked={flagged}\n          onChange={() => {\n            setFlagged(!flagged)\n          }}\n        />\n        <span>Da rivedere</span>\n      </label>\n      <Button\n        label=\"Conferma e vai alla successiva\"\n        leftIcon={() => <FaCheck />}\n        onClick={() => {\n          props.updateAnswer({\n            id: props.currentQuestion.id,\n            sub: props.currentQuestion.sub,\n            letter: props.tmpAnswerState[0],\n            flagged\n          })\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { Answer } from '../App'\nimport { FcLeft, FcRight } from 'react-icons/fc'\nimport Button from '../Util/Button'\n\nconst containerStyle = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst leftContainer = createStyle({\n  display: 'flex'\n})\n\nconst rightContainer = createStyle({\n  display: 'flex',\n  padding: '1em',\n  gap: '5px'\n})\n\nconst pStyle = createStyle({\n  flexGrow: 1,\n  flexShrink: 1,\n  textAlign: 'center',\n  fontSize: '11pt',\n  minWidth: '4em',\n  padding: '7.5px'\n})\n\nconst iconStyle = createStyle({\n  height: '17,5px',\n  width: '17,5px'\n})\n\ninterface QuestionHeaderProps {\n  questionIndex: number\n  shiftQuestionIndex: (offset: number) => void\n  sectionQuestions: Question[]\n  currentAnswer: Answer\n}\nexport default function QuestionHeader(props: QuestionHeaderProps) {\n  return (\n    <div style={containerStyle}>\n      <div style={leftContainer}>\n        <p style={{ ...pStyle, fontWeight: 'bold', width: '11em' }}>\n          Domanda {props.questionIndex + 1}\n        </p>\n        <p\n          style={{\n            ...pStyle,\n            backgroundColor: props.currentAnswer?.flagged\n              ? theme.questionYellow\n              : props.currentAnswer?.letter\n              ? theme.questionGreen\n              : 'inherit'\n          }}\n        >\n          {(props.currentAnswer?.letter?.toUpperCase() || '') +\n            (props.currentAnswer?.flagged ? '?' : '') || ' '}\n        </p>\n        <p style={pStyle}>\n          Risposta {props.currentAnswer?.letter ? '' : 'non '}data\n        </p>\n      </div>\n      <div style={rightContainer}>\n        <Button\n          label=\"precedente\"\n          onClick={() => props.shiftQuestionIndex(-1)}\n          leftIcon={() => <FcLeft style={iconStyle} />}\n        />\n        <Button\n          label=\"successiva\"\n          onClick={() => props.shiftQuestionIndex(1)}\n          rightIcon={() => <FcRight style={iconStyle} />}\n        />\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport Collapsible from 'react-collapsible'\nimport { createStyle, theme } from '../../utils/style'\nimport Button from './Button'\n\nconst outerDivStyle = createStyle({\n  margin: '10px'\n})\n\nconst collapsibleStyle = createStyle({\n  background: theme.lightBackground,\n  margin: '5px'\n})\n\nconst pStyle = createStyle({\n  margin: '2px',\n  padding: '10px'\n})\n\ninterface CollapsibleTextProps {\n  label: string\n  longText: string\n  startOpen?: boolean\n}\nexport default function CollapsibleText(props: CollapsibleTextProps) {\n  const [isOpen, setOpen] = useState(props.startOpen ?? true)\n\n  return (\n    <div style={outerDivStyle}>\n      <Collapsible\n        trigger={\n          <Button\n            label=\"mostra/nascondi testo\"\n            onClick={() => setOpen(!isOpen)}\n          />\n        }\n        open={isOpen}\n        easing=\"ease-in-out\"\n      >\n        <div style={collapsibleStyle}>\n          <p style={pStyle}>{props.longText}</p>\n        </div>\n      </Collapsible>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport CollapsibleText from '../Util/CollapsibleText'\nimport RenderedText from '../Util/RenderedText'\n\ninterface QuestionViewProps {\n  question: Question\n}\n\nconst textStyle = createStyle()\n\nexport default function QuestionView({ question }: QuestionViewProps) {\n  if (!question)\n    return <span style={textStyle}>No question to display ¯\\_(ツ)_/¯</span>\n\n  return (\n    <div style={textStyle}>\n      {question.track ? (\n        <CollapsibleText\n          label=\"mostra/nascondi traccia\"\n          longText={question.track}\n        />\n      ) : (\n        <span />\n      )}\n      <RenderedText text={question.text}></RenderedText>\n      <br />\n      <br />\n      <span>\n        {question.attachments?.length\n          ? 'TODO ' + question.attachments.join(', ')\n          : ''}\n      </span>\n    </div>\n  )\n}\n","import React from 'react'\nimport { answerLetter, section, QuestionsData } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData } from '../App'\n\nconst defaultBorder = 'thin solid #606060'\n\nconst barStyle = createStyle({\n  display: 'flex',\n  fontSize: '9.5pt',\n  textDecoration: 'none',\n  color: theme.primary\n})\n\ninterface RecapBarProps {\n  active: boolean\n  currentQuestionIndexState: statePair<number>\n  sectionAnswers: AnswersData[section]\n  sectionQuestions: QuestionsData[section]\n}\nexport default function RecapBar(props: RecapBarProps) {\n  return (\n    <a style={barStyle} {...(props.active ? { href: '#' } : {})}>\n      {props.sectionQuestions.map((q, i) => {\n        const answer = props.sectionAnswers.find(\n          (a) => a && a.id == q.id && (q.sub ? q.sub == a.sub : true)\n        )\n        return (\n          <AnswerCell\n            key={i}\n            index={i}\n            letter={answer?.letter}\n            flagged={answer?.flagged || false}\n            onClick={() => {\n              if (props.active) props.currentQuestionIndexState[1](i)\n            }}\n            selected={props.active && props.currentQuestionIndexState[0] == i}\n          />\n        )\n      })}\n    </a>\n  )\n}\n\nconst cellContainerStyle = createStyle({\n  display: 'flex',\n  flexShrink: 1,\n  flexDirection: 'column',\n  alignContent: 'baseline',\n  textAlign: 'center',\n  width: '4em'\n})\n\nconst cellSubStyle = createStyle({\n  padding: '0.3em',\n  height: '1.2em',\n  boxShadow:\n    '1px 0 0 0 #606060, 0 1px 0 0 #606060, 1px 1px 0 0 #606060, /* corner */ 1px 0 0 0 #606060 inset, 0 1px 0 0 #606060 inset'\n})\n\nconst selectedCell = createStyle({\n  outline: `5px solid ${theme.primary}`,\n  marginInline: '4px',\n  color: 'black'\n})\n\nconst pStyle = createStyle({\n  margin: 'auto'\n})\n\ninterface AnswerCellProps {\n  index: number\n  letter: answerLetter | undefined\n  flagged: boolean\n  onClick: () => void\n  selected: boolean\n}\nfunction AnswerCell(props: AnswerCellProps) {\n  return (\n    <div\n      style={{\n        ...cellContainerStyle,\n        backgroundColor: theme.lightBackground,\n        ...(props.selected ? selectedCell : {})\n      }}\n      onClick={props.onClick}\n    >\n      <div\n        style={{\n          ...cellSubStyle,\n          borderBottom: defaultBorder,\n          ...(props.selected ? { fontWeight: 'bold' } : {})\n        }}\n      >\n        <p style={pStyle}>{props.index + 1}</p>\n      </div>\n      <div\n        style={{\n          ...cellSubStyle,\n          backgroundColor: props.flagged\n            ? theme.questionYellow\n            : props.letter\n            ? theme.questionGreen\n            : 'white'\n        }}\n      >\n        <p style={pStyle}>\n          {props.letter?.toUpperCase() || ' '}\n          {props.flagged && '?'}\n        </p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { sectionInfo } from '../../utils/constants'\nimport { QuestionsData, section } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport Button from '../Util/Button'\n\nconst baseStyle = createStyle({\n  display: 'flex',\n  paddingTop: '10px',\n  paddingBottom: '20px',\n  alignItems: 'center',\n  flexDirection: 'column'\n})\n\ninterface SectionRecapProps {\n  goToNextSection: () => void\n  section: section\n  sectionAnswers: AnswersData[section]\n  sectionQuestions: QuestionsData[section]\n  secondsUsed: number\n}\nexport default function SectionRecap(props: SectionRecapProps) {\n  const info = sectionInfo[props.section]\n\n  return (\n    <div style={baseStyle}>\n      <p>\n        Sezione conclusa: {info.name}\n        <br />-{' '}\n        {props.sectionAnswers.reduce(\n          (acc, curr) => (curr.letter ? acc + 1 : acc),\n          0\n        )}{' '}\n        / {props.sectionQuestions.length} risposte date\n        <br />- Tempo utilizzato:{' '}\n        {Math.floor(props.secondsUsed / 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {(props.secondsUsed % 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}{' '}\n        / {info.minutes}:00 (\n        {Math.floor(\n          (info.minutes * 60 - props.secondsUsed) / 60\n        ).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {((info.minutes * 60 - props.secondsUsed) % 60).toLocaleString(\n          undefined,\n          {\n            minimumIntegerDigits: 2\n          }\n        )}{' '}\n        rimanenti)\n      </p>\n      <Button label=\"Prossima sezione\" onClick={props.goToNextSection} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { sectionInfo } from '../../utils/constants'\nimport { section } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport Button from '../Util/Button'\n\nconst baseStyle = createStyle({\n  display: 'flex',\n  paddingTop: '10px',\n  paddingBottom: '20px',\n  alignItems: 'center',\n  flexDirection: 'column'\n})\n\ninterface SectionStartProps {\n  section: section\n  startSection: () => void\n}\nexport default function SectionStart(props: SectionStartProps) {\n  const info = sectionInfo[props.section]\n\n  return (\n    <div style={baseStyle}>\n      <p>\n        Stai per iniziare: {info.name}\n        <br />-{' '}\n        {props.section == 'com'\n          ? `${info.sample} bran${info.sample > 1 ? 'i' : 'o'}, `\n          : ''}\n        {info.sample} domande\n        <br />- {info.minutes} minuti\n        <br />- Punteggio massimo: {info.score}/100\n      </p>\n      <Button label=\"Inzia sezione\" onClick={props.startSection} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { TimerResult } from 'react-timer-hook'\nimport { createStyle, theme } from '../../utils/style'\n\nconst alertThreshold = 60\n\nconst divStyle = createStyle({\n  display: 'flex',\n  fontWeight: 'bold',\n  color: theme.timerGreen,\n  border: '2px solid',\n  borderRadius: '4px',\n  height: '1.75em',\n  fontSize: '1.25em',\n  alignItems: 'center',\n  paddingInline: '10px'\n})\n\nconst expiring = createStyle({\n  color: theme.timerRed\n})\n\ninterface TimerProps {\n  timer: TimerResult\n  expired: boolean\n}\nexport default function Timer(props: TimerProps) {\n  const { timer } = props\n\n  return (\n    <div\n      style={{\n        ...divStyle,\n        ...((timer.hours * 60 + timer.minutes) * 60 + timer.seconds <\n          alertThreshold &&\n        !(timer.hours + timer.minutes + timer.seconds == 0 && !props.expired)\n          ? expiring\n          : {})\n      }}\n    >\n      {(timer.hours * 60 + timer.minutes).toLocaleString(undefined, {\n        minimumIntegerDigits: 2\n      })}\n      :{timer.seconds.toLocaleString(undefined, { minimumIntegerDigits: 2 })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { TimerResult } from 'react-timer-hook'\nimport { getSectionName } from '../../utils/constants'\nimport { section, QuestionsData } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport Button from '../Util/Button'\nimport Timer from './Timer'\n\nconst outerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between'\n})\n\nconst innerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'baseline',\n  flexDirection: 'row',\n  gap: '15px',\n  fontSize: '11pt'\n})\n\ninterface TopControlsProps {\n  active: boolean\n  answers: AnswersData\n  closeSection: () => void\n  currentSection: section\n  timer: TimerResult\n  timerExpired: boolean\n  questions: QuestionsData\n}\n\nexport default function TopControls(props: TopControlsProps) {\n  const { currentSection } = props\n\n  return (\n    <div style={outerDiv}>\n      <div style={innerDiv}>\n        <div>\n          <p>\n            Sezione: <b>{getSectionName(currentSection)}</b> <br />\n            Riposte: {props.answers[currentSection].length} /{' '}\n            {props.questions[currentSection].length} (\n            {props.answers[currentSection].reduce(\n              (acc, curr) => acc + (curr.flagged ? 1 : 0),\n              0\n            )}{' '}\n            da rivedere)\n          </p>\n        </div>\n        {props.active && (\n          <Button label=\"Chiudi sezione\" onClick={props.closeSection} />\n        )}\n      </div>\n      <Timer timer={props.timer} expired={props.timerExpired} />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useTimer } from 'react-timer-hook'\nimport { getNextSection, sectionInfo } from '../../utils/constants'\nimport { section, QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { Answer, AnswersData, TimeRecord, view } from '../App'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionHeader from './QuestionHeader'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport SectionRecap from './SectionRecap'\nimport SectionStart from './SectionStart'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  answersState: statePair<AnswersData>\n  questions: QuestionsData\n  sectionState: statePair<section>\n  timeRecordState: statePair<TimeRecord>\n  viewState: statePair<view>\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  const [qIndex, originalSetQIndex] = useState(0),\n    tmpFlaggedState = useState(false),\n    tmpAnswerState = useState<Answer['letter']>(),\n    tmpTimerExpiredState = useState(false)\n\n  const [currentSection, setSection] = props.sectionState,\n    [view, setView] = props.viewState,\n    [answers, setAnswers] = props.answersState,\n    [timeRecord, setTimeRecord] = props.timeRecordState\n\n  const closeSection = () => {\n    setView('TOL-secRecap')\n    setQIndex(0)\n\n    const nextAnswers = answers\n    nextAnswers[currentSection] = nextAnswers[currentSection].map((a) => ({\n      ...a,\n      flagged: false\n    }))\n    setAnswers(nextAnswers)\n\n    const nextTR = timeRecord\n    nextTR[currentSection] =\n      sectionInfo[currentSection].minutes * 60 -\n      ((timer.hours * 60 + timer.minutes) * 60 + timer.seconds)\n    setTimeRecord(nextTR)\n\n    timer.restart(new Date(), false)\n  }\n\n  const setQIndex = (index: React.SetStateAction<number>) => {\n    const curr = answers[currentSection][index as number]\n    tmpFlaggedState[1](curr?.flagged || false)\n    tmpAnswerState[1](curr?.letter || undefined)\n    return originalSetQIndex(index)\n  }\n\n  const shiftQIndex = (offset: number) => {\n    const next =\n      (qIndex + offset + sectionQuestions.length) % sectionQuestions.length || 0\n    return setQIndex(next)\n  }\n\n  const timer = useTimer({\n    expiryTimestamp: getTimerExpDate(sectionInfo[currentSection].minutes),\n    autoStart: false,\n    onExpire: () => {\n      closeSection()\n      tmpTimerExpiredState[1](true)\n    }\n  })\n\n  const currentQuestionIndexState: statePair<number> = [qIndex, setQIndex]\n  if (!props.questions) return <span>Loading...</span>\n\n  const sectionQuestions = props.questions[props.sectionState[0]],\n    currentQuestion = sectionQuestions[qIndex],\n    currentAnswer = answers[currentSection][qIndex]\n\n  const getViewElement = () => {\n    if (view == 'TOL-startSec')\n      return (\n        <SectionStart\n          section={currentSection}\n          startSection={() => {\n            setView('TOL-testing')\n            timer.start()\n          }}\n        />\n      )\n    else if (view == 'TOL-testing')\n      return (\n        <div>\n          <QuestionHeader\n            currentAnswer={currentAnswer}\n            questionIndex={qIndex}\n            shiftQuestionIndex={shiftQIndex}\n            sectionQuestions={sectionQuestions}\n          />\n          <QuestionView question={currentQuestion} />\n          <AnswerForm\n            currentAnswer={currentAnswer}\n            currentQuestion={currentQuestion}\n            tmpAnswerState={tmpAnswerState}\n          />\n          <BottomControls\n            currentQuestion={currentQuestion}\n            tmpAnswerState={tmpAnswerState}\n            tmpFlaggedState={tmpFlaggedState}\n            updateAnswer={(a) => {\n              const next = answers\n              next[currentSection][qIndex] = a\n              setAnswers(next)\n              shiftQIndex(1)\n            }}\n          />\n        </div>\n      )\n    else if (view == 'TOL-secRecap')\n      return (\n        <SectionRecap\n          goToNextSection={() => {\n            const nextSection = getNextSection(currentSection)\n            if (nextSection) {\n              setSection(nextSection)\n              timer.restart(\n                getTimerExpDate(sectionInfo[nextSection].minutes),\n                false\n              )\n              tmpTimerExpiredState[1](false)\n              setView('TOL-startSec')\n            } else {\n              setView('INFO-end')\n            }\n          }}\n          section={currentSection}\n          secondsUsed={timeRecord[currentSection] || 0}\n          sectionAnswers={answers[currentSection]}\n          sectionQuestions={props.questions[currentSection]}\n        />\n      )\n    else return <div />\n  }\n\n  return (\n    <div>\n      <TopControls\n        active={view == 'TOL-testing'}\n        answers={answers}\n        closeSection={closeSection}\n        currentSection={currentSection}\n        questions={props.questions}\n        timer={timer}\n        timerExpired={tmpTimerExpiredState[0]}\n      />\n      <RecapBar\n        active={view == 'TOL-testing'}\n        currentQuestionIndexState={currentQuestionIndexState}\n        sectionAnswers={answers[currentSection]}\n        sectionQuestions={sectionQuestions}\n      />\n      {getViewElement()}\n    </div>\n  )\n}\n\nfunction getTimerExpDate(minutes: number) {\n  const res = new Date()\n  res.setSeconds(res.getSeconds() + minutes * 60)\n  return res\n}\n","import React from 'react'\nimport { createStyle, theme } from '../../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  answerLetter,\n  section,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport InfoView from './InfoView/InfoView'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Util/Separator'\n\nexport type view =\n  | 'dbPreview'\n  | 'INFO-start'\n  | 'TOL-startSec'\n  | 'TOL-testing'\n  | 'TOL-secRecap'\n  | 'INFO-end'\n\nexport interface Answer {\n  id: string\n  sub?: string\n  letter: answerLetter | undefined\n  flagged: boolean\n}\n\nexport type AnswersData = Record<section, Answer[]>\n\nexport type TimeRecord = Partial<Record<section, number>>\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, setQuestions] = useState<QuestionsData>()\n  const [view, setView] = useState<view>('dbPreview')\n  const sectionState = useState<section>('ing')\n  const answersState = useState<AnswersData>({\n    ing: [],\n    mat: [],\n    com: [],\n    fis: []\n  })\n  const timeRecordState = useState<TimeRecord>({})\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          setQuestions(selectRandomQuestions(db))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header viewState={[view, setView]} />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : view.startsWith('TOL') && questions ? (\n        <QuestionsForm\n          answersState={answersState}\n          questions={questions as QuestionsData}\n          sectionState={sectionState}\n          timeRecordState={timeRecordState}\n          viewState={[view, setView]}\n        />\n      ) : view.startsWith('INFO') && questions ? (\n        <InfoView\n          answers={answersState[0]}\n          questions={questions}\n          viewState={[view, setView]}\n        />\n      ) : undefined}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}