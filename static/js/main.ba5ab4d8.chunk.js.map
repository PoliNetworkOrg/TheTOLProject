{"version":3,"sources":["utils/constants.ts","utils/database.ts","utils/style.ts","components/Util/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","components/Util/Button.tsx","static/logo.webp","components/Header.tsx","components/Util/GeneralPurposeCollapsible.tsx","components/Util/CollapsibleText.tsx","components/InfoView/InfoEnd.tsx","components/InfoView/InfoStart.tsx","components/InfoView/InfoView.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionHeader.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","components/QuestionsForm/SectionRecap.tsx","components/QuestionsForm/SectionStart.tsx","components/QuestionsForm/Timer.tsx","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Util/Separator.tsx","components/App.tsx","index.tsx"],"names":["sectionInfo","ing","name","order","sample","minutes","coeff","Fraction","mat","com","sub","fis","correctionWeight","getSectionName","key","sheetDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","getImageURL","fileName","theme","baseStyle","fontFamily","color","createStyle","styles","reduce","acc","curr","RenderedText","text","DBPreview","Object","entries","filter","map","questions","style","q","validated","answers","b","c","d","e","id","ErrorView","hidden","display","internal","textStyle","fontSize","alignItems","leftIcon","float","marginRight","rightIcon","marginLeft","Button","props","onClick","label","divStyle","height","justifyContent","flex","centeredText","logoDivStyle","gap","margin","logoStyle","buttonDivStyle","Header","viewState","src","logo","alt","currentView","selectView","outerDivStyle","collapsibleStyle","background","GeneralPurposeCollapsible","useState","startOpen","isOpen","setOpen","trigger","open","easing","children","pStyle","padding","textAlign","innerPStyle","CollapsibleText","longText","trim","split","t","i","flexDirection","tableDivStyle","alignSelf","tableStyle","borderSpacing","tableCell","paddingInline","border","tableHeader","fontWeight","backgroundColor","centeredTextStyle","InfoEnd","correctionGrid","fromEntries","section","secQuestions","correct","notGiven","wrong","forEach","answer","find","letter","total","length","weight","score","div","mul","correction","add","testPassed","compare","tengPassed","sort","round","toString","info","toFraction","join","InfoStart","startTest","InfoView","view","baseText","AnswerForm","letterState","tmpAnswerState","currentQuestion","RadioRow","undefined","verticalAlign","spanStyle","width","toUpperCase","type","value","checked","onChange","event","target","controlsDiv","paddingBlock","labelStyle","BottomControls","tmpFlaggedState","flagged","setFlagged","updateAnswer","containerStyle","leftContainer","rightContainer","flexGrow","flexShrink","minWidth","iconStyle","QuestionHeader","questionIndex","currentAnswer","shiftQuestionIndex","marginBottom","imageStyle","maxHeight","QuestionView","question","track","attachments","index","barStyle","textDecoration","RecapBar","active","href","sectionQuestions","sectionAnswers","AnswerCell","currentQuestionIndexState","selected","cellContainerStyle","alignContent","cellSubStyle","boxShadow","selectedCell","outline","marginInline","borderBottom","paddingTop","paddingBottom","SectionRecap","Math","floor","secondsUsed","toLocaleString","minimumIntegerDigits","max","values","goToNextSection","SectionStart","startSection","borderRadius","expiring","Timer","timer","hours","seconds","expired","outerDiv","innerDiv","TopControls","currentSection","closeSection","timerExpired","QuestionsForm","qIndex","originalSetQIndex","tmpTimerExpiredState","alertDisplayedState","sectionState","setSection","setView","answersState","setAnswers","timeRecordState","timeRecord","setTimeRecord","shouldShowAlert","showAlert","alert","setQIndex","nextAnswers","nextTR","restart","Date","ignoreAlert","next","shiftQIndex","offset","useTimer","expiryTimestamp","getTimerExpDate","autoStart","onExpire","start","nextSection","sortedInfo","findIndex","getNextSection","res","setSeconds","getSeconds","Separator","App","database","loadDatabase","setQuestions","loadingError","showError","useEffect","readDatabase","then","includes","validQuestions","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","startsWith","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba5ab4d8.chunk.js","sourcesContent":["import { section } from './database'\nimport Fraction from 'fraction.js'\n\ninterface sectionInfoElement {\n  /** The readable name of the section */\n  name: string\n  /** The order in which the section should be tested */\n  order: number\n  /** The number of questions that should be selected */\n  sample: number\n  /** The number of sub-questions that should be selected (only applies to 'com') */\n  sub?: number\n  /** The maximum number of minutes that the user can use to complete a section */\n  minutes: number\n  /** The weight that this section's score has on the total score ({@link testTotalScore}) */\n  coeff: number | Fraction\n}\n\nexport const sectionInfo: Record<section, sectionInfoElement> = {\n  ing: {\n    name: 'Inglese',\n    order: 1,\n    sample: 30,\n    minutes: 15,\n    coeff: new Fraction('1/3')\n  },\n  mat: {\n    name: 'Matematica',\n    order: 2,\n    sample: 25,\n    minutes: 75,\n    coeff: 2.6\n  },\n  com: {\n    name: 'Comprensione',\n    order: 3,\n    sample: 1,\n    sub: 5,\n    minutes: 10,\n    coeff: 3\n  },\n  fis: {\n    name: 'Fisica',\n    order: 4,\n    sample: 5,\n    minutes: 10,\n    coeff: 2\n  }\n}\n\nexport const testTotalScore = 100\n/** Minimum score to pass the test */\nexport const testPassThreshold = 60\n/** Minimum number of correct questions to pass the test */\nexport const tengPassThreshold = 24\n/** How to weight answer when calculating the section score */\nexport const correctionWeight = {\n  correct: 1,\n  wrong: -0.25,\n  notGiven: 0\n}\n\nexport function getSectionName(key: section) {\n  return sectionInfo[key].name\n}\n\nexport function getNextSection(currentSection: section): section | undefined {\n  const sortedInfo = Object.entries(sectionInfo).sort(\n    (a, b) => a[1].order - b[1].order\n  ) as [section, sectionInfoElement][]\n  const i = sortedInfo.findIndex((e) => e[0] == currentSection)\n  return (sortedInfo[i + 1] || [])[0]\n}\n","import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\nimport { sectionInfo } from './constants'\n\nexport const sheetDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type section = typeof sheetDict[keyof typeof sheetDict]\n\nexport type answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n  validated: boolean\n\n  // These are only present for COM questions\n  sub?: string\n  track?: string\n}\n\nexport type QuestionsData = Record<section, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProjectData/main/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(db: Database): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [section /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a section <=> exclude \"meta\"\n      .filter(([key]) => (Object.values(sheetDict) as string[]).includes(key))\n      .map(([key, questions]) => {\n        // Select only validated questions\n        const validQuestions = questions.filter((q) => q.validated)\n\n        // Get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(validQuestions.map((v) => v.id))).slice(\n          0,\n          sectionInfo[key].sample\n        )\n\n        // Return only the questions with a selected ID\n        return [\n          key,\n          _.shuffle(validQuestions.filter((q) => resIds.includes(q.id)))\n        ]\n      })\n  ) as QuestionsData\n}\n\nexport function getImageURL(fileName: string) {\n  return `https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProjectData/main/img/${fileName}`\n}\n","import * as CSS from 'csstype'\n\nexport type cssLike = CSS.Properties\n\nexport const theme = {\n  lightBackground: '#F3F3EE',\n  lightBorder: '#D5DFE4',\n  primary: '#069',\n  questionYellow: 'yellow',\n  questionGreen: '#00D700',\n  softBlack: '#333',\n  timerGreen: '#009527',\n  timerRed: 'red'\n}\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana',\n  color: theme.softBlack\n}\n\nexport function createStyle(...styles: CSS.Properties[]) {\n  return {\n    ...baseStyle,\n    ...styles.reduce((acc, curr) => ({ ...acc, ...curr }), {})\n  }\n}\n","import React from 'react'\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { section, Database, Question } from '../utils/database'\nimport { createStyle } from '../utils/style'\n\nimport RenderedText from './Util/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nconst baseStyle = createStyle()\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          section,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key} style={baseStyle}>\n          <h3>Section: {key}</h3>\n          <ul>\n            {questions\n              .filter((q) => q.text || key == 'com')\n              .map((q) => (\n                <div key={key + q.id + (q.sub || '')}>\n                  <RenderedText text={q.text} />\n                  <br />\n                  <p>Valid: {q.validated + ''}</p>\n                  <br />\n                  <RenderedText text={q.answers.a} />\n                  <br />\n                  <RenderedText text={q.answers.b} />\n                  <br />\n                  <RenderedText text={q.answers.c} />\n                  <br />\n                  <RenderedText text={q.answers.d} />\n                  <br />\n                  <RenderedText text={q.answers.e} />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle, cssLike } from '../../utils/style'\n\nconst textStyle = createStyle({\n  fontFamily: ' Arial',\n  fontSize: '9.5pt',\n  alignItems: 'center'\n})\n\nconst leftIcon = createStyle({\n  float: 'left',\n  marginRight: '2px'\n})\nconst rightIcon = createStyle({\n  float: 'right',\n  marginLeft: '2px'\n})\n\ninterface ButtonProps {\n  label: string\n  onClick: () => void\n  style?: cssLike\n  leftIcon?: () => JSX.Element\n  rightIcon?: () => JSX.Element\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button style={textStyle} onClick={props.onClick}>\n      <span style={leftIcon}>{props.leftIcon && props.leftIcon()}</span>\n      <span>{props.label}</span>\n      <span style={rightIcon}>{props.rightIcon && props.rightIcon()}</span>\n    </button>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.34b8e2e9.webp\";","import React from 'react'\nimport { createStyle } from '../utils/style'\nimport { statePair } from '../utils/types'\nimport { view } from './App'\nimport Button from './Util/Button'\nimport logo from '../static/logo.webp'\n\nconst divStyle = createStyle({\n  height: '70px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between'\n})\n\nconst textStyle = createStyle({\n  flex: 1,\n  fontSize: '18pt',\n  display: 'inline-block'\n})\n\nconst centeredText = createStyle(textStyle, {\n  display: 'flex',\n  justifyContent: 'center'\n})\n\nconst logoDivStyle = createStyle({\n  flex: 1,\n  display: 'flex',\n  alignItems: 'center',\n  gap: '10px',\n  margin: '5px'\n})\n\nconst logoStyle = createStyle({\n  height: '60px'\n})\n\nconst buttonDivStyle = createStyle({\n  display: 'flex',\n  flex: 1,\n  justifyContent: 'flex-end'\n})\n\ninterface HeaderProps {\n  viewState: statePair<view>\n}\n\nexport default function Header({ viewState }: HeaderProps) {\n  return (\n    <div style={divStyle}>\n      <div style={logoDivStyle}>\n        <img src={logo} alt=\"logo\" style={logoStyle} />\n        <h1 style={textStyle}>PoliNetwork</h1>\n      </div>\n      <h1 style={centeredText}>The TOL Project</h1>\n      <div style={buttonDivStyle}>\n        <Button\n          label=\"Toggle demo view\"\n          onClick={() => {\n            const [currentView, selectView] = viewState\n            if (currentView == 'dbPreview') selectView('INFO-start')\n            else selectView('dbPreview')\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n","import React, { ReactNode, useState } from 'react'\nimport Collapsible from 'react-collapsible'\nimport { createStyle, theme } from '../../utils/style'\nimport Button from './Button'\n\nconst outerDivStyle = createStyle({\n  margin: '10px'\n})\n\nconst collapsibleStyle = createStyle({\n  background: theme.lightBackground,\n  margin: '5px'\n})\n\ninterface GeneralPurposeCollapsibleProps {\n  label: string\n  children: ReactNode\n  startOpen?: boolean\n}\nexport default function GeneralPurposeCollapsible(\n  props: GeneralPurposeCollapsibleProps\n) {\n  const [isOpen, setOpen] = useState(props.startOpen ?? true)\n\n  return (\n    <div style={outerDivStyle}>\n      <Collapsible\n        trigger={\n          <Button label={props.label} onClick={() => setOpen(!isOpen)} />\n        }\n        open={isOpen}\n        easing=\"ease-in-out\"\n      >\n        <div style={collapsibleStyle}>{props.children}</div>\n      </Collapsible>\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport GeneralPurposeCollapsible from './GeneralPurposeCollapsible'\n\nconst pStyle = createStyle({\n  margin: '2px',\n  padding: '10px',\n  textAlign: 'justify'\n})\n\nconst innerPStyle = createStyle({ padding: '1px', margin: 0 })\n\ninterface CollapsibleTextProps {\n  label: string\n  longText: string\n  startOpen?: boolean\n}\nexport default function CollapsibleText(props: CollapsibleTextProps) {\n  return (\n    <GeneralPurposeCollapsible label={props.label} startOpen={props.startOpen}>\n      <div style={pStyle}>\n        {props.longText\n          .trim()\n          .split('\\n')\n          .map((t, i) => (\n            <p style={innerPStyle} key={i}>\n              {t}\n            </p>\n          ))}\n      </div>\n    </GeneralPurposeCollapsible>\n  )\n}\n","import Fraction from 'fraction.js'\nimport React from 'react'\nimport {\n  correctionWeight,\n  getSectionName,\n  sectionInfo,\n  tengPassThreshold,\n  testPassThreshold,\n  testTotalScore\n} from '../../utils/constants'\nimport { Question, QuestionsData, section } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport CollapsibleText from '../Util/CollapsibleText'\n\nconst divStyle = createStyle({\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  fontSize: '11pt'\n})\n\nconst tableDivStyle = createStyle({ alignSelf: 'center' })\n\nconst tableStyle = createStyle({ borderSpacing: 0 })\n\nconst tableCell = createStyle({\n  padding: '5px',\n  paddingInline: '10px',\n  textAlign: 'center',\n  border: `thin solid ${theme.lightBorder}`,\n  borderSpacing: '0px',\n  fontSize: '9.5pt'\n})\n\nconst tableHeader = createStyle(tableCell, {\n  fontWeight: 'bold',\n  backgroundColor: theme.lightBackground,\n  textAlign: 'left'\n})\n\nconst centeredTextStyle = createStyle({\n  textAlign: 'center'\n})\n\ninterface InfoEndProps {\n  answers: AnswersData\n  questions: QuestionsData\n}\nexport default function InfoEnd(props: InfoEndProps) {\n  const { answers, questions } = props\n\n  const correctionGrid = Object.fromEntries(\n    (Object.entries(questions) as [section, Question[]][]).map(\n      ([section, secQuestions]) => {\n        let correct = 0,\n          notGiven = 0,\n          wrong = 0\n\n        secQuestions.forEach((q) => {\n          const answer = answers[section].find(\n            (a) => a && a.id == q.id && a.sub == q.sub\n          )\n\n          if (!answer || !answer.letter) notGiven++\n          else if (answer.letter == q.correct) correct++\n          else wrong++\n        })\n\n        const total = secQuestions.length,\n          sample = sectionInfo[section].sample,\n          sub = sectionInfo[section].sub || 1,\n          weight = sectionInfo[section].coeff\n\n        return [\n          section,\n          {\n            total,\n            correct,\n            notGiven,\n            wrong,\n            weight,\n            score: new Fraction(\n              correctionWeight.correct * correct +\n                correctionWeight.wrong * wrong +\n                correctionWeight.notGiven * notGiven\n            )\n              .div(total)\n              .mul(sample * sub)\n          }\n        ]\n      }\n    )\n  )\n\n  const score = (\n    Object.entries(correctionGrid) as [section, typeof correctionGrid[string]][]\n  )\n    .map(([, correction]) => correction.score.mul(correction.weight))\n    .reduce((acc, curr) => acc.add(curr), new Fraction(0))\n\n  const testPassed = score.compare(testPassThreshold) >= 0,\n    tengPassed = correctionGrid.ing?.correct >= tengPassThreshold\n\n  return (\n    <div style={divStyle}>\n      <p>La simulazione è finita, questo è il risultato: </p>\n      <div style={tableDivStyle}>\n        <table style={tableStyle}>\n          <tr>\n            <td></td>\n            <td style={tableHeader}>Punteggio sezione</td>\n            <td style={tableHeader}>N° quesiti</td>\n            <td style={tableHeader}>Esatti</td>\n            <td style={tableHeader}>Errati</td>\n            <td style={tableHeader}>Senza risposta</td>\n          </tr>\n          {(\n            Object.entries(correctionGrid) as [\n              section,\n              typeof correctionGrid[section]\n            ][]\n          )\n            .sort((a, b) => sectionInfo[a[0]].order - sectionInfo[b[0]].order)\n            .map(([section, correction]) => (\n              <tr key={section}>\n                <td style={tableHeader}>{getSectionName(section)}</td>\n                <td style={tableCell}>\n                  {correction.score.round(2).toString()}\n                </td>\n                <td style={tableCell}>{correction.total}</td>\n                <td style={tableCell}>{correction.correct}</td>\n                <td style={tableCell}>{correction.wrong}</td>\n                <td style={tableCell}>{correction.notGiven}</td>\n              </tr>\n            ))}\n        </table>\n      </div>\n      <p style={centeredTextStyle}>\n        Punteggio calcolato: {score.round(2).toString()} / {testTotalScore}\n        <br />\n        Esito:{' '}\n        {testPassed\n          ? `Superato${!tengPassed ? ' (OFA TENG)' : ''}`\n          : `Non superato ${\n              !tengPassed ? '(OFA TEST + OFA TENG)' : '(OFA TEST)'\n            }`}\n      </p>\n      <CollapsibleText\n        label=\"Come viene calcolato il punteggio\"\n        startOpen={false}\n        longText={`\n      Per ogni sezione viene conteggiato ${\n        correctionWeight.correct\n      } per ogni risposta corretta, ${\n          correctionWeight.wrong\n        } per ogni risposta errata e ${\n          correctionWeight.notGiven\n        } per ogni risposta non data.\n      Il punteggio complessivo della sezione viene poi pesato in base al numero di quesiti e al punteggio massimo ottenibile (rispetto all'intero test):\n      ${Object.entries(sectionInfo)\n        .map(\n          ([, info]) =>\n            `- ${info.name}: peso ${\n              typeof info.coeff == 'number'\n                ? info.coeff\n                : info.coeff.toFraction()\n            }`\n        )\n        .join('\\n')}\n      `}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport Button from '../Util/Button'\n\nconst divStyle = createStyle({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  margin: '10px'\n})\n\ninterface InfoStartProps {\n  startTest: () => void\n}\nexport default function InfoStart(props: InfoStartProps) {\n  return (\n    <div style={divStyle}>\n      <p>\n        Questa è una serie di informazioni veramente interessanti sulla demo,\n        che prima o poi mi metterò a scrivere\n      </p>\n      <div>\n        <Button label=\"Inizia il test\" onClick={props.startTest} />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport InfoEnd from './InfoEnd'\nimport InfoStart from './InfoStart'\n\ninterface InfoViewProps {\n  answers: AnswersData\n  questions: QuestionsData\n  viewState: statePair<view>\n}\nexport default function InfoView(props: InfoViewProps) {\n  const view = props.viewState[0]\n\n  return view == 'INFO-start' ? (\n    <InfoStart\n      startTest={() => {\n        props.viewState[1]('TOL-startSec')\n      }}\n    />\n  ) : view == 'INFO-end' ? (\n    <InfoEnd answers={props.answers} questions={props.questions} />\n  ) : (\n    <div />\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport RenderedText from '../Util/RenderedText'\n\nconst baseText = createStyle({\n  fontSize: '11pt'\n})\n\ninterface AnswerFormProps {\n  currentAnswer: Answer | undefined\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n}\n\nexport default function AnswerForm(props: AnswerFormProps) {\n  const letterState = props.tmpAnswerState\n\n  if (!props.currentQuestion)\n    return (\n      <span style={baseText}>\n        <br />\n        No answers to display ¯\\_(ツ)_/¯\n      </span>\n    )\n\n  return (\n    <div>\n      <RadioRow\n        letter=\"a\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.a}\n      />\n      <RadioRow\n        letter=\"b\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.b}\n      />\n      <RadioRow\n        letter=\"c\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.c}\n      />\n      <RadioRow\n        letter=\"d\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.d}\n      />\n      <RadioRow\n        letter=\"e\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.e}\n      />\n      <RadioRow letter={undefined} letterState={letterState} text=\"Non so\" />\n    </div>\n  )\n}\n\ninterface RadioRowProps {\n  letter: Answer['letter']\n  letterState: statePair<Answer['letter']>\n  text: string\n}\nfunction RadioRow(props: RadioRowProps) {\n  const textStyle = createStyle({\n    fontWeight: 'bold',\n    textAlign: 'center',\n    verticalAlign: 'middle',\n    paddingInline: '10px'\n  })\n  const spanStyle = createStyle({\n    width: '2em',\n    float: 'left',\n    display: 'inline-block'\n  })\n\n  return (\n    <tr style={baseText}>\n      <label>\n        <td style={textStyle}>\n          <span style={spanStyle}>{props.letter?.toUpperCase() || '?'} </span>\n          <input\n            type=\"radio\"\n            value={props.letter}\n            checked={props.letter == props.letterState[0]}\n            onChange={(event) => {\n              // @ts-expect-error The value is correct\n              props.letterState[1](event.target.value || undefined)\n            }}\n          />\n        </td>\n        <td>\n          <RenderedText text={props.text} />\n        </td>\n      </label>\n    </tr>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport { FaCheck } from 'react-icons/fa'\nimport Button from '../Util/Button'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport { Question } from '../../utils/database'\n\nconst controlsDiv = createStyle({\n  display: 'flex',\n  flex: 1,\n  justifyContent: 'flex-end',\n  fontSize: '9.5pt',\n  verticalAlign: 'middle',\n  gap: '10px',\n  paddingBlock: '10px'\n})\n\nconst labelStyle = createStyle({ display: 'flex', alignItems: 'center' })\n\ninterface BottomControlsProps {\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n  tmpFlaggedState: statePair<boolean>\n  updateAnswer: (updatedAnswer: Answer) => void\n}\nexport default function BottomControls(props: BottomControlsProps) {\n  const [flagged, setFlagged] = props.tmpFlaggedState\n\n  if (!props.currentQuestion) return <div style={controlsDiv} />\n\n  return (\n    <div style={controlsDiv}>\n      <label style={labelStyle}>\n        <input\n          type=\"checkbox\"\n          checked={flagged}\n          onChange={() => {\n            setFlagged(!flagged)\n          }}\n        />\n        <span>Da rivedere</span>\n      </label>\n      <Button\n        label=\"Conferma e vai alla successiva\"\n        leftIcon={() => <FaCheck />}\n        onClick={() => {\n          props.updateAnswer({\n            id: props.currentQuestion.id,\n            sub: props.currentQuestion.sub,\n            letter: props.tmpAnswerState[0],\n            flagged\n          })\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { Answer } from '../App'\nimport { FcLeft, FcRight } from 'react-icons/fc'\nimport Button from '../Util/Button'\n\nconst containerStyle = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst leftContainer = createStyle({\n  display: 'flex'\n})\n\nconst rightContainer = createStyle({\n  display: 'flex',\n  padding: '1em',\n  gap: '5px'\n})\n\nconst pStyle = createStyle({\n  flexGrow: 1,\n  flexShrink: 1,\n  textAlign: 'center',\n  fontSize: '11pt',\n  minWidth: '4em',\n  padding: '7.5px'\n})\n\nconst iconStyle = createStyle({\n  height: '17,5px',\n  width: '17,5px'\n})\n\ninterface QuestionHeaderProps {\n  currentAnswer: Answer\n  questionIndex: number\n  sectionQuestions: Question[]\n  shiftQuestionIndex: (offset: number) => void\n}\nexport default function QuestionHeader(props: QuestionHeaderProps) {\n  return (\n    <div style={containerStyle}>\n      <div style={leftContainer}>\n        <p style={{ ...pStyle, fontWeight: 'bold', width: '11em' }}>\n          Domanda {props.questionIndex + 1}\n        </p>\n        <p\n          style={{\n            ...pStyle,\n            backgroundColor: props.currentAnswer?.flagged\n              ? theme.questionYellow\n              : props.currentAnswer?.letter\n              ? theme.questionGreen\n              : 'inherit'\n          }}\n        >\n          {(props.currentAnswer?.letter?.toUpperCase() || '') +\n            (props.currentAnswer?.flagged ? '?' : '') || ' '}\n        </p>\n        <p style={pStyle}>\n          Risposta {props.currentAnswer?.letter ? '' : 'non '}data\n        </p>\n      </div>\n      <div style={rightContainer}>\n        <Button\n          label=\"precedente\"\n          onClick={() => props.shiftQuestionIndex(-1)}\n          leftIcon={() => <FcLeft style={iconStyle} />}\n        />\n        <Button\n          label=\"successiva\"\n          onClick={() => props.shiftQuestionIndex(1)}\n          rightIcon={() => <FcRight style={iconStyle} />}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { getImageURL, Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport CollapsibleText from '../Util/CollapsibleText'\nimport GeneralPurposeCollapsible from '../Util/GeneralPurposeCollapsible'\nimport RenderedText from '../Util/RenderedText'\n\nconst textStyle = createStyle({\n  marginBottom: '5px'\n})\n\nconst imageStyle = createStyle({\n  maxHeight: '500px'\n})\n\ninterface QuestionViewProps {\n  question: Question\n}\n\nexport default function QuestionView({ question }: QuestionViewProps) {\n  if (!question)\n    return <span style={textStyle}>No question to display ¯\\_(ツ)_/¯</span>\n\n  return (\n    <div style={textStyle}>\n      {question.track ? (\n        <CollapsibleText\n          label=\"mostra/nascondi traccia\"\n          longText={question.track}\n        />\n      ) : (\n        <span />\n      )}\n      <RenderedText text={question.text}></RenderedText>\n      <br />\n      <br />\n      {question.attachments?.length && (\n        <GeneralPurposeCollapsible label=\"mostra/nascondi allegati\">\n          {question.attachments.map((fileName, index) => (\n            <span key={index + 1}>\n              <p style={textStyle}>Allegato {index + 1}:</p>\n              <img src={getImageURL(fileName)} style={imageStyle} />\n            </span>\n          ))}\n        </GeneralPurposeCollapsible>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { answerLetter, section, QuestionsData } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData } from '../App'\n\nconst defaultBorder = 'thin solid #606060'\n\nconst barStyle = createStyle({\n  display: 'flex',\n  fontSize: '9.5pt',\n  textDecoration: 'none',\n  color: theme.primary\n})\n\ninterface RecapBarProps {\n  active: boolean\n  currentQuestionIndexState: statePair<number>\n  sectionAnswers: AnswersData[section]\n  sectionQuestions: QuestionsData[section]\n}\nexport default function RecapBar(props: RecapBarProps) {\n  return (\n    <a style={barStyle} {...(props.active ? { href: '#' } : {})}>\n      {props.sectionQuestions.map((q, i) => {\n        const answer = props.sectionAnswers.find(\n          (a) => a && a.id == q.id && (q.sub ? q.sub == a.sub : true)\n        )\n        return (\n          <AnswerCell\n            key={i}\n            index={i}\n            letter={answer?.letter}\n            flagged={answer?.flagged || false}\n            onClick={() => {\n              if (props.active) props.currentQuestionIndexState[1](i)\n            }}\n            selected={props.active && props.currentQuestionIndexState[0] == i}\n          />\n        )\n      })}\n    </a>\n  )\n}\n\nconst cellContainerStyle = createStyle({\n  display: 'flex',\n  flexShrink: 1,\n  flexDirection: 'column',\n  alignContent: 'baseline',\n  textAlign: 'center',\n  width: '4em'\n})\n\nconst cellSubStyle = createStyle({\n  padding: '0.3em',\n  height: '1.2em',\n  boxShadow:\n    '1px 0 0 0 #606060, 0 1px 0 0 #606060, 1px 1px 0 0 #606060, /* corner */ 1px 0 0 0 #606060 inset, 0 1px 0 0 #606060 inset'\n})\n\nconst selectedCell = createStyle({\n  outline: `5px solid ${theme.primary}`,\n  marginInline: '4px',\n  color: 'black'\n})\n\nconst pStyle = createStyle({\n  margin: 'auto'\n})\n\ninterface AnswerCellProps {\n  index: number\n  letter: answerLetter | undefined\n  flagged: boolean\n  onClick: () => void\n  selected: boolean\n}\nfunction AnswerCell(props: AnswerCellProps) {\n  return (\n    <div\n      style={{\n        ...cellContainerStyle,\n        backgroundColor: theme.lightBackground,\n        ...(props.selected ? selectedCell : {})\n      }}\n      onClick={props.onClick}\n    >\n      <div\n        style={{\n          ...cellSubStyle,\n          borderBottom: defaultBorder,\n          ...(props.selected ? { fontWeight: 'bold' } : {})\n        }}\n      >\n        <p style={pStyle}>{props.index + 1}</p>\n      </div>\n      <div\n        style={{\n          ...cellSubStyle,\n          backgroundColor: props.flagged\n            ? theme.questionYellow\n            : props.letter\n            ? theme.questionGreen\n            : 'white'\n        }}\n      >\n        <p style={pStyle}>\n          {props.letter?.toUpperCase() || ' '}\n          {props.flagged && '?'}\n        </p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { sectionInfo } from '../../utils/constants'\nimport { QuestionsData, section } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport Button from '../Util/Button'\n\nconst baseStyle = createStyle({\n  display: 'flex',\n  paddingTop: '10px',\n  paddingBottom: '20px',\n  alignItems: 'center',\n  flexDirection: 'column'\n})\n\ninterface SectionRecapProps {\n  goToNextSection: () => void\n  section: section\n  sectionAnswers: AnswersData[section]\n  sectionQuestions: QuestionsData[section]\n  secondsUsed: number\n}\nexport default function SectionRecap(props: SectionRecapProps) {\n  const info = sectionInfo[props.section]\n\n  return (\n    <div style={baseStyle}>\n      <p>\n        Sezione conclusa: {info.name}\n        <br />-{' '}\n        {props.sectionAnswers.reduce(\n          (acc, curr) => (curr.letter ? acc + 1 : acc),\n          0\n        )}{' '}\n        / {props.sectionQuestions.length} risposte date\n        <br />- Tempo utilizzato:{' '}\n        {Math.floor((props.secondsUsed / 60) % 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {Math.floor(props.secondsUsed / 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {(props.secondsUsed % 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}{' '}\n        / {Math.floor(info.minutes / 60)}:{info.minutes % 60}:00 (\n        {Math.floor(\n          (info.minutes * 60 - props.secondsUsed) / 60 / 60\n        ).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {Math.floor(\n          ((info.minutes * 60 - props.secondsUsed) / 60) % 60\n        ).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {((info.minutes * 60 - props.secondsUsed) % 60).toLocaleString(\n          undefined,\n          {\n            minimumIntegerDigits: 2\n          }\n        )}{' '}\n        rimanente)\n      </p>\n      <Button\n        label={\n          info.order ==\n          Math.max(...Object.values(sectionInfo).map((i) => i.order))\n            ? 'Vedi esito del test'\n            : 'Prossima sezione'\n        }\n        onClick={props.goToNextSection}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { sectionInfo } from '../../utils/constants'\nimport { section } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport Button from '../Util/Button'\n\nconst baseStyle = createStyle({\n  display: 'flex',\n  paddingTop: '10px',\n  paddingBottom: '20px',\n  alignItems: 'center',\n  flexDirection: 'column'\n})\n\ninterface SectionStartProps {\n  section: section\n  startSection: () => void\n}\nexport default function SectionStart(props: SectionStartProps) {\n  const info = sectionInfo[props.section]\n\n  return (\n    <div style={baseStyle}>\n      <p>\n        Stai per iniziare: {info.name}\n        <br />-{' '}\n        {props.section == 'com'\n          ? `${info.sample} bran${info.sample > 1 ? 'i' : 'o'}, `\n          : ''}\n        {info.sample} domande\n        <br />- {info.minutes} minuti\n        <br />- Peso sezione:{' '}\n        {typeof info.coeff == 'number' ? info.coeff : info.coeff.toFraction()}\n      </p>\n      <Button label=\"Inzia sezione\" onClick={props.startSection} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { TimerResult } from 'react-timer-hook'\nimport { createStyle, theme } from '../../utils/style'\n\nconst alertThreshold = 60\n\nconst divStyle = createStyle({\n  display: 'flex',\n  fontWeight: 'bold',\n  color: theme.timerGreen,\n  border: '2px solid',\n  borderRadius: '4px',\n  height: '1.75em',\n  fontSize: '1.25em',\n  alignItems: 'center',\n  paddingInline: '10px'\n})\n\nconst expiring = createStyle({\n  color: theme.timerRed\n})\n\ninterface TimerProps {\n  timer: TimerResult\n  expired: boolean\n}\nexport default function Timer(props: TimerProps) {\n  const { timer } = props\n\n  return (\n    <div\n      style={{\n        ...divStyle,\n        ...((timer.hours * 60 + timer.minutes) * 60 + timer.seconds <\n          alertThreshold &&\n        !(timer.hours + timer.minutes + timer.seconds == 0 && !props.expired)\n          ? expiring\n          : {})\n      }}\n    >\n      {timer.hours.toLocaleString(undefined, {\n        minimumIntegerDigits: 2\n      })}\n      :\n      {timer.minutes.toLocaleString(undefined, {\n        minimumIntegerDigits: 2\n      })}\n      :{timer.seconds.toLocaleString(undefined, { minimumIntegerDigits: 2 })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { TimerResult } from 'react-timer-hook'\nimport { getSectionName } from '../../utils/constants'\nimport { section, QuestionsData } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport Button from '../Util/Button'\nimport Timer from './Timer'\n\nconst outerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between'\n})\n\nconst innerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'baseline',\n  flexDirection: 'row',\n  gap: '15px',\n  fontSize: '11pt'\n})\n\ninterface TopControlsProps {\n  active: boolean\n  answers: AnswersData\n  closeSection: () => void\n  currentSection: section\n  timer: TimerResult\n  timerExpired: boolean\n  questions: QuestionsData\n}\n\nexport default function TopControls(props: TopControlsProps) {\n  const { currentSection } = props\n\n  return (\n    <div style={outerDiv}>\n      <div style={innerDiv}>\n        <div>\n          <p>\n            Sezione: <b>{getSectionName(currentSection)}</b> <br />\n            Riposte: {props.answers[currentSection].length} /{' '}\n            {props.questions[currentSection].length} (\n            {props.answers[currentSection].reduce(\n              (acc, curr) => acc + (curr.flagged ? 1 : 0),\n              0\n            )}{' '}\n            da rivedere)\n          </p>\n        </div>\n        {props.active && (\n          <Button label=\"Chiudi sezione\" onClick={props.closeSection} />\n        )}\n      </div>\n      <Timer timer={props.timer} expired={props.timerExpired} />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useTimer } from 'react-timer-hook'\nimport { getNextSection, sectionInfo } from '../../utils/constants'\nimport { section, QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { Answer, AnswersData, TimeRecord, view } from '../App'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionHeader from './QuestionHeader'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport SectionRecap from './SectionRecap'\nimport SectionStart from './SectionStart'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  answersState: statePair<AnswersData>\n  questions: QuestionsData\n  sectionState: statePair<section>\n  timeRecordState: statePair<TimeRecord>\n  viewState: statePair<view>\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  const [qIndex, originalSetQIndex] = useState(0),\n    tmpFlaggedState = useState(false),\n    tmpAnswerState = useState<Answer['letter']>(),\n    tmpTimerExpiredState = useState(false),\n    alertDisplayedState = useState(false)\n\n  const [currentSection, setSection] = props.sectionState,\n    [view, setView] = props.viewState,\n    [answers, setAnswers] = props.answersState,\n    [timeRecord, setTimeRecord] = props.timeRecordState\n\n  const sectionQuestions = props.questions[props.sectionState[0]],\n    currentQuestion = sectionQuestions[qIndex],\n    currentAnswer = answers[currentSection][qIndex],\n    shouldShowAlert =\n      !alertDisplayedState[0] &&\n      (tmpAnswerState[0] != currentAnswer?.letter ||\n        tmpFlaggedState[0] != (currentAnswer?.flagged || false))\n\n  const showAlert = () => {\n    alert(\n      `Se prima non premi \"Conferma e vai alla successiva\" la risposta non verrà salvata.`\n    )\n    alertDisplayedState[1](true)\n  }\n\n  const closeSection = () => {\n    if (shouldShowAlert) return showAlert()\n    // else it's already reset by setQIndex\n\n    setView('TOL-secRecap')\n    setQIndex(0)\n    tmpAnswerState[1](undefined)\n    tmpFlaggedState[1](false)\n\n    const nextAnswers = answers\n    nextAnswers[currentSection] = nextAnswers[currentSection].map((a) => ({\n      ...a,\n      flagged: false\n    }))\n    setAnswers(nextAnswers)\n\n    const nextTR = timeRecord\n    nextTR[currentSection] =\n      sectionInfo[currentSection].minutes * 60 -\n      ((timer.hours * 60 + timer.minutes) * 60 + timer.seconds)\n    setTimeRecord(nextTR)\n\n    timer.restart(new Date(), false)\n  }\n\n  const setQIndex = (\n    index: React.SetStateAction<number>,\n    ignoreAlert = false\n  ) => {\n    if (shouldShowAlert && !ignoreAlert) {\n      showAlert()\n    } else {\n      const next = answers[currentSection][index as number]\n\n      tmpFlaggedState[1](next?.flagged || false)\n      tmpAnswerState[1](next?.letter || undefined)\n      alertDisplayedState[1](false)\n\n      originalSetQIndex(index)\n    }\n  }\n\n  const shiftQIndex = (offset: number, ignoreAlert = false) => {\n    const next =\n      (qIndex + offset + sectionQuestions.length) % sectionQuestions.length || 0\n    return setQIndex(next, ignoreAlert)\n  }\n\n  const timer = useTimer({\n    expiryTimestamp: getTimerExpDate(sectionInfo[currentSection].minutes),\n    autoStart: false,\n    onExpire: () => {\n      closeSection()\n      tmpTimerExpiredState[1](true)\n    }\n  })\n\n  const currentQuestionIndexState: statePair<number> = [qIndex, setQIndex]\n  if (!props.questions) return <span>Loading...</span>\n\n  const getViewElement = () => {\n    if (view == 'TOL-startSec')\n      return (\n        <SectionStart\n          section={currentSection}\n          startSection={() => {\n            setView('TOL-testing')\n            timer.start()\n          }}\n        />\n      )\n    else if (view == 'TOL-testing')\n      return (\n        <div>\n          <QuestionHeader\n            currentAnswer={currentAnswer}\n            questionIndex={qIndex}\n            shiftQuestionIndex={shiftQIndex}\n            sectionQuestions={sectionQuestions}\n          />\n          <QuestionView question={currentQuestion} />\n          <AnswerForm\n            currentAnswer={currentAnswer}\n            currentQuestion={currentQuestion}\n            tmpAnswerState={tmpAnswerState}\n          />\n          <BottomControls\n            currentQuestion={currentQuestion}\n            tmpAnswerState={tmpAnswerState}\n            tmpFlaggedState={tmpFlaggedState}\n            updateAnswer={(a) => {\n              const next = answers\n              next[currentSection][qIndex] = a\n              setAnswers(next)\n              shiftQIndex(1, true)\n            }}\n          />\n        </div>\n      )\n    else if (view == 'TOL-secRecap')\n      return (\n        <SectionRecap\n          goToNextSection={() => {\n            const nextSection = getNextSection(currentSection)\n            if (nextSection) {\n              setSection(nextSection)\n              timer.restart(\n                getTimerExpDate(sectionInfo[nextSection].minutes),\n                false\n              )\n              tmpTimerExpiredState[1](false)\n              setView('TOL-startSec')\n            } else {\n              setView('INFO-end')\n            }\n          }}\n          section={currentSection}\n          secondsUsed={timeRecord[currentSection] || 0}\n          sectionAnswers={answers[currentSection]}\n          sectionQuestions={props.questions[currentSection]}\n        />\n      )\n    else return <div />\n  }\n\n  return (\n    <div>\n      <TopControls\n        active={view == 'TOL-testing'}\n        answers={answers}\n        closeSection={closeSection}\n        currentSection={currentSection}\n        questions={props.questions}\n        timer={timer}\n        timerExpired={tmpTimerExpiredState[0]}\n      />\n      <RecapBar\n        active={view == 'TOL-testing'}\n        currentQuestionIndexState={currentQuestionIndexState}\n        sectionAnswers={answers[currentSection]}\n        sectionQuestions={sectionQuestions}\n      />\n      {getViewElement()}\n    </div>\n  )\n}\n\nfunction getTimerExpDate(minutes: number) {\n  const res = new Date()\n  res.setSeconds(res.getSeconds() + minutes * 60)\n  return res\n}\n","import React from 'react'\nimport { createStyle, theme } from '../../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  answerLetter,\n  section,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport InfoView from './InfoView/InfoView'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Util/Separator'\n\nexport type view =\n  | 'dbPreview'\n  | 'INFO-start'\n  | 'TOL-startSec'\n  | 'TOL-testing'\n  | 'TOL-secRecap'\n  | 'INFO-end'\n\nexport interface Answer {\n  id: string\n  sub?: string\n  letter: answerLetter | undefined\n  flagged: boolean\n}\n\nexport type AnswersData = Record<section, Answer[]>\n\nexport type TimeRecord = Partial<Record<section, number>>\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, setQuestions] = useState<QuestionsData>()\n  const [view, setView] = useState<view>('dbPreview')\n  const sectionState = useState<section>('ing')\n  const answersState = useState<AnswersData>({\n    ing: [],\n    mat: [],\n    com: [],\n    fis: []\n  })\n  const timeRecordState = useState<TimeRecord>({})\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          setQuestions(selectRandomQuestions(db))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header viewState={[view, setView]} />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : view.startsWith('TOL') && questions ? (\n        <QuestionsForm\n          answersState={answersState}\n          questions={questions as QuestionsData}\n          sectionState={sectionState}\n          timeRecordState={timeRecordState}\n          viewState={[view, setView]}\n        />\n      ) : view.startsWith('INFO') && questions ? (\n        <InfoView\n          answers={answersState[0]}\n          questions={questions}\n          viewState={[view, setView]}\n        />\n      ) : undefined}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}