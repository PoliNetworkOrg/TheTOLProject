{"version":3,"sources":["utils/constants.ts","utils/database.ts","components/Util/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","utils/style.ts","components/Util/Button.tsx","components/Header.tsx","components/Util/GeneralPurposeCollapsible.tsx","components/Util/CollapsibleText.tsx","components/InfoView/InfoEnd.tsx","components/InfoView/InfoStart.tsx","components/InfoView/InfoView.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionHeader.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","components/QuestionsForm/SectionRecap.tsx","components/QuestionsForm/SectionStart.tsx","components/QuestionsForm/Timer.tsx","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Util/Separator.tsx","components/App.tsx","index.tsx"],"names":["sectionInfo","ing","name","order","sample","minutes","coeff","Fraction","mat","com","sub","fis","getSectionName","key","sheetDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","getImageURL","fileName","RenderedText","text","DBPreview","Object","entries","filter","map","questions","q","validated","answers","b","c","d","e","id","ErrorView","hidden","display","internal","theme","baseStyle","fontFamily","color","createStyle","styles","reduce","acc","curr","textStyle","fontSize","alignItems","leftIcon","float","marginRight","rightIcon","marginLeft","Button","props","style","onClick","label","divStyle","height","justifyContent","Header","viewState","currentView","selectView","outerDivStyle","margin","collapsibleStyle","background","GeneralPurposeCollapsible","useState","startOpen","isOpen","setOpen","trigger","open","easing","children","pStyle","padding","textAlign","innerPStyle","CollapsibleText","longText","trim","split","t","i","flexDirection","tableDivStyle","alignSelf","tableStyle","borderSpacing","tableCell","paddingInline","border","tableHeader","fontWeight","backgroundColor","centeredTextStyle","InfoEnd","correctionGrid","fromEntries","section","secQuestions","correct","notGiven","wrong","forEach","answer","find","letter","total","length","score","correction","mul","add","testPassed","compare","tengPassed","sort","round","toString","info","toFraction","join","InfoStart","startTest","InfoView","view","baseText","AnswerForm","letterState","tmpAnswerState","currentQuestion","RadioRow","undefined","verticalAlign","spanStyle","width","toUpperCase","type","value","checked","onChange","event","target","controlsDiv","flex","gap","paddingBlock","labelStyle","BottomControls","tmpFlaggedState","flagged","setFlagged","updateAnswer","containerStyle","leftContainer","rightContainer","flexGrow","flexShrink","minWidth","iconStyle","QuestionHeader","questionIndex","currentAnswer","shiftQuestionIndex","marginBottom","imageStyle","maxHeight","QuestionView","question","track","attachments","index","src","barStyle","textDecoration","RecapBar","active","href","sectionQuestions","sectionAnswers","AnswerCell","currentQuestionIndexState","selected","cellContainerStyle","alignContent","cellSubStyle","boxShadow","selectedCell","outline","marginInline","borderBottom","paddingTop","paddingBottom","SectionRecap","Math","floor","secondsUsed","toLocaleString","minimumIntegerDigits","max","values","goToNextSection","SectionStart","startSection","borderRadius","expiring","Timer","timer","hours","seconds","expired","outerDiv","innerDiv","TopControls","currentSection","closeSection","timerExpired","QuestionsForm","qIndex","originalSetQIndex","tmpTimerExpiredState","sectionState","setSection","setView","answersState","setAnswers","timeRecordState","timeRecord","setTimeRecord","setQIndex","nextAnswers","nextTR","restart","Date","shiftQIndex","offset","next","useTimer","expiryTimestamp","getTimerExpDate","autoStart","onExpire","start","nextSection","sortedInfo","findIndex","getNextSection","res","setSeconds","getSeconds","Separator","App","database","loadDatabase","setQuestions","loadingError","showError","useEffect","readDatabase","then","includes","validQuestions","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","startsWith","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7174c26.chunk.js","sourcesContent":["import { section } from './database'\nimport Fraction from 'fraction.js'\n\ninterface sectionInfoElement {\n  /** The readable name of the section */\n  name: string\n  /** The order in which the section should be tested */\n  order: number\n  /** The number of questions that should be selected */\n  sample: number\n  /** The number of sub-questions that should be selected (only applies to 'com') */\n  sub?: number\n  /** The maximum number of minutes that the user can use to complete a section */\n  minutes: number\n  /** The weight that this section's score has on the total score ({@link testTotalScore}) */\n  coeff: number | Fraction\n}\n\nexport const sectionInfo: Record<section, sectionInfoElement> = {\n  ing: {\n    name: 'Inglese',\n    order: 1,\n    sample: 30,\n    minutes: 15,\n    coeff: new Fraction('1/3')\n  },\n  mat: {\n    name: 'Matematica',\n    order: 2,\n    sample: 25,\n    minutes: 75,\n    coeff: 2.6\n  },\n  com: {\n    name: 'Comprensione',\n    order: 3,\n    sample: 1,\n    sub: 5,\n    minutes: 10,\n    coeff: 3\n  },\n  fis: {\n    name: 'Fisica',\n    order: 4,\n    sample: 5,\n    minutes: 10,\n    coeff: 2\n  }\n}\n\nexport const testTotalScore = 100\n/** Minimum score to pass the test */\nexport const testPassThreshold = 60\n/** Minimum number of correct questions to pass the test */\nexport const tengPassThreshold = 24\n\nexport function getSectionName(key: section) {\n  return sectionInfo[key].name\n}\n\nexport function getNextSection(currentSection: section): section | undefined {\n  const sortedInfo = Object.entries(sectionInfo).sort(\n    (a, b) => a[1].order - b[1].order\n  ) as [section, sectionInfoElement][]\n  const i = sortedInfo.findIndex((e) => e[0] == currentSection)\n  return (sortedInfo[i + 1] || [])[0]\n}\n","import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\nimport { sectionInfo } from './constants'\n\nexport const sheetDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type section = typeof sheetDict[keyof typeof sheetDict]\n\nexport type answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n  validated: boolean\n\n  // These are only present for COM questions\n  sub?: string\n  track?: string\n}\n\nexport type QuestionsData = Record<section, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProjectData/main/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(db: Database): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [section /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a section <=> exclude \"meta\"\n      .filter(([key]) => (Object.values(sheetDict) as string[]).includes(key))\n      .map(([key, questions]) => {\n        // Select only validated questions\n        const validQuestions = questions.filter((q) => q.validated)\n\n        // Get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(validQuestions.map((v) => v.id))).slice(\n          0,\n          sectionInfo[key].sample\n        )\n\n        // Return only the questions with a selected ID\n        return [\n          key,\n          _.shuffle(validQuestions.filter((q) => resIds.includes(q.id)))\n        ]\n      })\n  ) as QuestionsData\n}\n\nexport function getImageURL(fileName: string) {\n  return `https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProjectData/main/img/${fileName}`\n}\n","import React from 'react'\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { section, Database, Question } from '../utils/database'\n\nimport RenderedText from './Util/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          section,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key}>\n          <h3>Section: {key}</h3>\n          <ul>\n            {questions\n              .filter((q) => q.text || key == 'com')\n              .map((q) => (\n                <div key={key + q.id + (q.sub || '')}>\n                  <RenderedText text={q.text} />\n                  <br />\n                  <p>Valid: {q.validated + ''}</p>\n                  <br />\n                  <RenderedText text={q.answers.a} />\n                  <br />\n                  <RenderedText text={q.answers.b} />\n                  <br />\n                  <RenderedText text={q.answers.c} />\n                  <br />\n                  <RenderedText text={q.answers.d} />\n                  <br />\n                  <RenderedText text={q.answers.e} />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nexport type cssLike = CSS.Properties\n\nexport const theme = {\n  lightBackground: '#F3F3EE',\n  lightBorder: '#D5DFE4',\n  primary: '#069',\n  questionYellow: 'yellow',\n  questionGreen: '#00D700',\n  softBlack: '#333',\n  timerGreen: '#009527',\n  timerRed: 'red'\n}\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana',\n  color: theme.softBlack\n}\n\nexport function createStyle(...styles: CSS.Properties[]) {\n  return {\n    ...baseStyle,\n    ...styles.reduce((acc, curr) => ({ ...acc, ...curr }), {})\n  }\n}\n","import React from 'react'\nimport { createStyle, cssLike } from '../../utils/style'\n\nconst textStyle = createStyle({\n  fontFamily: ' Arial',\n  fontSize: '9.5pt',\n  alignItems: 'center'\n})\n\nconst leftIcon = createStyle({\n  float: 'left',\n  marginRight: '2px'\n})\nconst rightIcon = createStyle({\n  float: 'right',\n  marginLeft: '2px'\n})\n\ninterface ButtonProps {\n  label: string\n  onClick: () => void\n  style?: cssLike\n  leftIcon?: () => JSX.Element\n  rightIcon?: () => JSX.Element\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <button style={textStyle} onClick={props.onClick}>\n      <span style={leftIcon}>{props.leftIcon && props.leftIcon()}</span>\n      <span>{props.label}</span>\n      <span style={rightIcon}>{props.rightIcon && props.rightIcon()}</span>\n    </button>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\nimport { statePair } from '../utils/types'\nimport { view } from './App'\nimport Button from './Util/Button'\n\nconst divStyle = createStyle({\n  height: '70px',\n  display: 'flex',\n  alignItems: 'baseline',\n  justifyContent: 'space-between'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt',\n  display: 'inline-block'\n})\n\ninterface HeaderProps {\n  viewState: statePair<view>\n}\n\nexport default function Header({ viewState }: HeaderProps) {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n      <Button\n        label=\"Toggle demo view\"\n        onClick={() => {\n          const [currentView, selectView] = viewState\n          if (currentView == 'dbPreview') selectView('INFO-start')\n          else selectView('dbPreview')\n        }}\n      />\n    </div>\n  )\n}\n","import React, { ReactNode, useState } from 'react'\nimport Collapsible from 'react-collapsible'\nimport { createStyle, theme } from '../../utils/style'\nimport Button from './Button'\n\nconst outerDivStyle = createStyle({\n  margin: '10px'\n})\n\nconst collapsibleStyle = createStyle({\n  background: theme.lightBackground,\n  margin: '5px'\n})\n\ninterface GeneralPurposeCollapsibleProps {\n  label: string\n  children: ReactNode\n  startOpen?: boolean\n}\nexport default function GeneralPurposeCollapsible(\n  props: GeneralPurposeCollapsibleProps\n) {\n  const [isOpen, setOpen] = useState(props.startOpen ?? true)\n\n  return (\n    <div style={outerDivStyle}>\n      <Collapsible\n        trigger={\n          <Button label={props.label} onClick={() => setOpen(!isOpen)} />\n        }\n        open={isOpen}\n        easing=\"ease-in-out\"\n      >\n        <div style={collapsibleStyle}>{props.children}</div>\n      </Collapsible>\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport GeneralPurposeCollapsible from './GeneralPurposeCollapsible'\n\nconst pStyle = createStyle({\n  margin: '2px',\n  padding: '10px',\n  textAlign: 'justify'\n})\n\nconst innerPStyle = createStyle({ padding: '1px', margin: 0 })\n\ninterface CollapsibleTextProps {\n  label: string\n  longText: string\n  startOpen?: boolean\n}\nexport default function CollapsibleText(props: CollapsibleTextProps) {\n  return (\n    <GeneralPurposeCollapsible label={props.label} startOpen={props.startOpen}>\n      <div style={pStyle}>\n        {props.longText\n          .trim()\n          .split('\\n')\n          .map((t, i) => (\n            <p style={innerPStyle} key={i}>\n              {t}\n            </p>\n          ))}\n      </div>\n    </GeneralPurposeCollapsible>\n  )\n}\n","import Fraction from 'fraction.js'\nimport React from 'react'\nimport {\n  getSectionName,\n  sectionInfo,\n  tengPassThreshold,\n  testPassThreshold,\n  testTotalScore\n} from '../../utils/constants'\nimport { Question, QuestionsData, section } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport CollapsibleText from '../Util/CollapsibleText'\n\nconst divStyle = createStyle({\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  fontSize: '11pt'\n})\n\nconst tableDivStyle = createStyle({ alignSelf: 'center' })\n\nconst tableStyle = createStyle({ borderSpacing: 0 })\n\nconst tableCell = createStyle({\n  padding: '5px',\n  paddingInline: '10px',\n  textAlign: 'center',\n  border: `thin solid ${theme.lightBorder}`,\n  borderSpacing: '0px',\n  fontSize: '9.5pt'\n})\n\nconst tableHeader = createStyle(tableCell, {\n  fontWeight: 'bold',\n  backgroundColor: theme.lightBackground,\n  textAlign: 'left'\n})\n\nconst centeredTextStyle = createStyle({\n  textAlign: 'center'\n})\n\ninterface InfoEndProps {\n  answers: AnswersData\n  questions: QuestionsData\n}\nexport default function InfoEnd(props: InfoEndProps) {\n  const { answers, questions } = props\n\n  const correctionGrid = Object.fromEntries(\n    (Object.entries(questions) as [section, Question[]][]).map(\n      ([section, secQuestions]) => {\n        let correct = 0,\n          notGiven = 0,\n          wrong = 0\n\n        secQuestions.forEach((q) => {\n          const answer = answers[section].find(\n            (a) => a && a.id == q.id && a.sub == q.sub\n          )\n\n          if (!answer || !answer.letter) notGiven++\n          else if (answer.letter == q.correct) correct++\n          else wrong++\n        })\n\n        return [\n          section,\n          {\n            total: secQuestions.length,\n            correct,\n            notGiven,\n            wrong\n          }\n        ]\n      }\n    )\n  )\n\n  const score = (\n    Object.entries(correctionGrid) as [section, typeof correctionGrid[string]][]\n  )\n    .map(([section, correction]) =>\n      correction.total\n        ? new Fraction(sectionInfo[section].coeff as Fraction).mul(\n            correction.correct - 0.25 * correction.wrong\n          )\n        : new Fraction(0)\n    )\n    .reduce((acc, curr) => acc.add(curr), new Fraction(0))\n\n  const testPassed = score.compare(testPassThreshold) >= 0,\n    tengPassed = correctionGrid.ing?.correct >= tengPassThreshold\n\n  return (\n    <div style={divStyle}>\n      <p>La simulazione è finita, questo è il punteggio: </p>\n      <div style={tableDivStyle}>\n        <table style={tableStyle}>\n          <tr>\n            <td></td>\n            <td style={tableHeader}>N° quesiti</td>\n            <td style={tableHeader}>Esatti</td>\n            <td style={tableHeader}>Errati</td>\n            <td style={tableHeader}>Senza risposta</td>\n          </tr>\n          {(\n            Object.entries(correctionGrid) as [\n              section,\n              typeof correctionGrid[section]\n            ][]\n          )\n            .sort((a, b) => sectionInfo[a[0]].order - sectionInfo[b[0]].order)\n            .map(([section, correction]) => (\n              <tr key={section}>\n                <td style={tableHeader}>{getSectionName(section)}</td>\n                <td style={tableCell}>{correction.total}</td>\n                <td style={tableCell}>{correction.correct}</td>\n                <td style={tableCell}>{correction.wrong}</td>\n                <td style={tableCell}>{correction.notGiven}</td>\n              </tr>\n            ))}\n        </table>\n      </div>\n      <p style={centeredTextStyle}>\n        Punteggio calcolato: {score.round(2).toString()} / {testTotalScore}\n        <br />\n        Esito:{' '}\n        {testPassed\n          ? `Superato${!tengPassed ? ' (OFA TENG)' : ''}`\n          : `Non superato ${\n              !tengPassed ? '(OFA TEST + OFA TENG)' : '(OFA TEST)'\n            }`}\n      </p>\n      <CollapsibleText\n        label=\"Come viene calcolato il punteggio\"\n        startOpen={false}\n        longText={`\n      Per ogni sezione viene conteggiato +1 per ogni risposta corretta, -0,25 per ogni risposta errata e 0 per ogni risposta non data.\n      Il punteggio complessivo della sezione viene poi pesato in base al punteggio massimo ottenibile (rispetto all'intero test) e al numero di quesiti:\n      ${Object.entries(sectionInfo)\n        .map(\n          ([section, info]) =>\n            `- ${info.name}: peso ${\n              typeof info.coeff == 'number'\n                ? info.coeff\n                : info.coeff.toFraction()\n            }, ${props.questions[section as section].length} quesiti`\n        )\n        .join('\\n')}\n      `}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport Button from '../Util/Button'\n\ninterface InfoStartProps {\n  startTest: () => void\n}\nexport default function InfoStart(props: InfoStartProps) {\n  return (\n    <div>\n      <p>\n        Questa è una serie di informazioni veramente interessanti sulla demo,\n        che prima o poi mi metterò a scrivere\n      </p>\n      <Button label=\"Inizia il test\" onClick={props.startTest} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { AnswersData, view } from '../App'\nimport InfoEnd from './InfoEnd'\nimport InfoStart from './InfoStart'\n\ninterface InfoViewProps {\n  answers: AnswersData\n  questions: QuestionsData\n  viewState: statePair<view>\n}\nexport default function InfoView(props: InfoViewProps) {\n  const view = props.viewState[0]\n\n  return view == 'INFO-start' ? (\n    <InfoStart\n      startTest={() => {\n        props.viewState[1]('TOL-startSec')\n      }}\n    />\n  ) : view == 'INFO-end' ? (\n    <InfoEnd answers={props.answers} questions={props.questions} />\n  ) : (\n    <div />\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport RenderedText from '../Util/RenderedText'\n\nconst baseText = createStyle({\n  fontSize: '11pt'\n})\n\ninterface AnswerFormProps {\n  currentAnswer: Answer | undefined\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n}\n\nexport default function AnswerForm(props: AnswerFormProps) {\n  const letterState = props.tmpAnswerState\n\n  if (!props.currentQuestion)\n    return (\n      <span style={baseText}>\n        <br />\n        No answers to display ¯\\_(ツ)_/¯\n      </span>\n    )\n\n  return (\n    <div>\n      <RadioRow\n        letter=\"a\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.a}\n      />\n      <RadioRow\n        letter=\"b\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.b}\n      />\n      <RadioRow\n        letter=\"c\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.c}\n      />\n      <RadioRow\n        letter=\"d\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.d}\n      />\n      <RadioRow\n        letter=\"e\"\n        letterState={letterState}\n        text={props.currentQuestion.answers.e}\n      />\n      <RadioRow letter={undefined} letterState={letterState} text=\"Non so\" />\n    </div>\n  )\n}\n\ninterface RadioRowProps {\n  letter: Answer['letter']\n  letterState: statePair<Answer['letter']>\n  text: string\n}\nfunction RadioRow(props: RadioRowProps) {\n  const textStyle = createStyle({\n    fontWeight: 'bold',\n    textAlign: 'center',\n    verticalAlign: 'middle',\n    paddingInline: '10px'\n  })\n  const spanStyle = createStyle({\n    width: '2em',\n    float: 'left',\n    display: 'inline-block'\n  })\n\n  return (\n    <tr style={baseText}>\n      <label>\n        <td style={textStyle}>\n          <span style={spanStyle}>{props.letter?.toUpperCase() || '?'} </span>\n          <input\n            type=\"radio\"\n            value={props.letter}\n            checked={props.letter == props.letterState[0]}\n            onChange={(event) => {\n              // @ts-expect-error The value is correct\n              props.letterState[1](event.target.value || undefined)\n            }}\n          />\n        </td>\n        <td>\n          <RenderedText text={props.text} />\n        </td>\n      </label>\n    </tr>\n  )\n}\n","import React from 'react'\nimport { createStyle } from '../../utils/style'\nimport { FaCheck } from 'react-icons/fa'\nimport Button from '../Util/Button'\nimport { statePair } from '../../utils/types'\nimport { Answer } from '../App'\nimport { Question } from '../../utils/database'\n\nconst controlsDiv = createStyle({\n  display: 'flex',\n  flex: 1,\n  justifyContent: 'flex-end',\n  fontSize: '9.5pt',\n  verticalAlign: 'middle',\n  gap: '10px',\n  paddingBlock: '10px'\n})\n\nconst labelStyle = createStyle({ display: 'flex', alignItems: 'center' })\n\ninterface BottomControlsProps {\n  currentQuestion: Question\n  tmpAnswerState: statePair<Answer['letter']>\n  tmpFlaggedState: statePair<boolean>\n  updateAnswer: (updatedAnswer: Answer) => void\n}\nexport default function BottomControls(props: BottomControlsProps) {\n  const [flagged, setFlagged] = props.tmpFlaggedState\n\n  if (!props.currentQuestion) return <div style={controlsDiv} />\n\n  return (\n    <div style={controlsDiv}>\n      <label style={labelStyle}>\n        <input\n          type=\"checkbox\"\n          checked={flagged}\n          onChange={() => {\n            setFlagged(!flagged)\n          }}\n        />\n        <span>Da rivedere</span>\n      </label>\n      <Button\n        label=\"Conferma e vai alla successiva\"\n        leftIcon={() => <FaCheck />}\n        onClick={() => {\n          props.updateAnswer({\n            id: props.currentQuestion.id,\n            sub: props.currentQuestion.sub,\n            letter: props.tmpAnswerState[0],\n            flagged\n          })\n        }}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Question } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { Answer } from '../App'\nimport { FcLeft, FcRight } from 'react-icons/fc'\nimport Button from '../Util/Button'\n\nconst containerStyle = createStyle({\n  display: 'flex',\n  justifyContent: 'space-between'\n})\n\nconst leftContainer = createStyle({\n  display: 'flex'\n})\n\nconst rightContainer = createStyle({\n  display: 'flex',\n  padding: '1em',\n  gap: '5px'\n})\n\nconst pStyle = createStyle({\n  flexGrow: 1,\n  flexShrink: 1,\n  textAlign: 'center',\n  fontSize: '11pt',\n  minWidth: '4em',\n  padding: '7.5px'\n})\n\nconst iconStyle = createStyle({\n  height: '17,5px',\n  width: '17,5px'\n})\n\ninterface QuestionHeaderProps {\n  questionIndex: number\n  shiftQuestionIndex: (offset: number) => void\n  sectionQuestions: Question[]\n  currentAnswer: Answer\n}\nexport default function QuestionHeader(props: QuestionHeaderProps) {\n  return (\n    <div style={containerStyle}>\n      <div style={leftContainer}>\n        <p style={{ ...pStyle, fontWeight: 'bold', width: '11em' }}>\n          Domanda {props.questionIndex + 1}\n        </p>\n        <p\n          style={{\n            ...pStyle,\n            backgroundColor: props.currentAnswer?.flagged\n              ? theme.questionYellow\n              : props.currentAnswer?.letter\n              ? theme.questionGreen\n              : 'inherit'\n          }}\n        >\n          {(props.currentAnswer?.letter?.toUpperCase() || '') +\n            (props.currentAnswer?.flagged ? '?' : '') || ' '}\n        </p>\n        <p style={pStyle}>\n          Risposta {props.currentAnswer?.letter ? '' : 'non '}data\n        </p>\n      </div>\n      <div style={rightContainer}>\n        <Button\n          label=\"precedente\"\n          onClick={() => props.shiftQuestionIndex(-1)}\n          leftIcon={() => <FcLeft style={iconStyle} />}\n        />\n        <Button\n          label=\"successiva\"\n          onClick={() => props.shiftQuestionIndex(1)}\n          rightIcon={() => <FcRight style={iconStyle} />}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { getImageURL, Question } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport CollapsibleText from '../Util/CollapsibleText'\nimport GeneralPurposeCollapsible from '../Util/GeneralPurposeCollapsible'\nimport RenderedText from '../Util/RenderedText'\n\nconst textStyle = createStyle({\n  marginBottom: '5px'\n})\n\nconst imageStyle = createStyle({\n  maxHeight: '500px'\n})\n\ninterface QuestionViewProps {\n  question: Question\n}\n\nexport default function QuestionView({ question }: QuestionViewProps) {\n  if (!question)\n    return <span style={textStyle}>No question to display ¯\\_(ツ)_/¯</span>\n\n  return (\n    <div style={textStyle}>\n      {question.track ? (\n        <CollapsibleText\n          label=\"mostra/nascondi traccia\"\n          longText={question.track}\n        />\n      ) : (\n        <span />\n      )}\n      <RenderedText text={question.text}></RenderedText>\n      <br />\n      <br />\n      {question.attachments?.length && (\n        <GeneralPurposeCollapsible label=\"mostra/nascondi allegati\">\n          {question.attachments.map((fileName, index) => (\n            <span key={index + 1}>\n              <p style={textStyle}>Allegato {index + 1}:</p>\n              <img src={getImageURL(fileName)} style={imageStyle} />\n            </span>\n          ))}\n        </GeneralPurposeCollapsible>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { answerLetter, section, QuestionsData } from '../../utils/database'\nimport { createStyle, theme } from '../../utils/style'\nimport { statePair } from '../../utils/types'\nimport { AnswersData } from '../App'\n\nconst defaultBorder = 'thin solid #606060'\n\nconst barStyle = createStyle({\n  display: 'flex',\n  fontSize: '9.5pt',\n  textDecoration: 'none',\n  color: theme.primary\n})\n\ninterface RecapBarProps {\n  active: boolean\n  currentQuestionIndexState: statePair<number>\n  sectionAnswers: AnswersData[section]\n  sectionQuestions: QuestionsData[section]\n}\nexport default function RecapBar(props: RecapBarProps) {\n  return (\n    <a style={barStyle} {...(props.active ? { href: '#' } : {})}>\n      {props.sectionQuestions.map((q, i) => {\n        const answer = props.sectionAnswers.find(\n          (a) => a && a.id == q.id && (q.sub ? q.sub == a.sub : true)\n        )\n        return (\n          <AnswerCell\n            key={i}\n            index={i}\n            letter={answer?.letter}\n            flagged={answer?.flagged || false}\n            onClick={() => {\n              if (props.active) props.currentQuestionIndexState[1](i)\n            }}\n            selected={props.active && props.currentQuestionIndexState[0] == i}\n          />\n        )\n      })}\n    </a>\n  )\n}\n\nconst cellContainerStyle = createStyle({\n  display: 'flex',\n  flexShrink: 1,\n  flexDirection: 'column',\n  alignContent: 'baseline',\n  textAlign: 'center',\n  width: '4em'\n})\n\nconst cellSubStyle = createStyle({\n  padding: '0.3em',\n  height: '1.2em',\n  boxShadow:\n    '1px 0 0 0 #606060, 0 1px 0 0 #606060, 1px 1px 0 0 #606060, /* corner */ 1px 0 0 0 #606060 inset, 0 1px 0 0 #606060 inset'\n})\n\nconst selectedCell = createStyle({\n  outline: `5px solid ${theme.primary}`,\n  marginInline: '4px',\n  color: 'black'\n})\n\nconst pStyle = createStyle({\n  margin: 'auto'\n})\n\ninterface AnswerCellProps {\n  index: number\n  letter: answerLetter | undefined\n  flagged: boolean\n  onClick: () => void\n  selected: boolean\n}\nfunction AnswerCell(props: AnswerCellProps) {\n  return (\n    <div\n      style={{\n        ...cellContainerStyle,\n        backgroundColor: theme.lightBackground,\n        ...(props.selected ? selectedCell : {})\n      }}\n      onClick={props.onClick}\n    >\n      <div\n        style={{\n          ...cellSubStyle,\n          borderBottom: defaultBorder,\n          ...(props.selected ? { fontWeight: 'bold' } : {})\n        }}\n      >\n        <p style={pStyle}>{props.index + 1}</p>\n      </div>\n      <div\n        style={{\n          ...cellSubStyle,\n          backgroundColor: props.flagged\n            ? theme.questionYellow\n            : props.letter\n            ? theme.questionGreen\n            : 'white'\n        }}\n      >\n        <p style={pStyle}>\n          {props.letter?.toUpperCase() || ' '}\n          {props.flagged && '?'}\n        </p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { sectionInfo } from '../../utils/constants'\nimport { QuestionsData, section } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport Button from '../Util/Button'\n\nconst baseStyle = createStyle({\n  display: 'flex',\n  paddingTop: '10px',\n  paddingBottom: '20px',\n  alignItems: 'center',\n  flexDirection: 'column'\n})\n\ninterface SectionRecapProps {\n  goToNextSection: () => void\n  section: section\n  sectionAnswers: AnswersData[section]\n  sectionQuestions: QuestionsData[section]\n  secondsUsed: number\n}\nexport default function SectionRecap(props: SectionRecapProps) {\n  const info = sectionInfo[props.section]\n\n  return (\n    <div style={baseStyle}>\n      <p>\n        Sezione conclusa: {info.name}\n        <br />-{' '}\n        {props.sectionAnswers.reduce(\n          (acc, curr) => (curr.letter ? acc + 1 : acc),\n          0\n        )}{' '}\n        / {props.sectionQuestions.length} risposte date\n        <br />- Tempo utilizzato:{' '}\n        {Math.floor((props.secondsUsed / 60) % 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {Math.floor(props.secondsUsed / 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {(props.secondsUsed % 60).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}{' '}\n        / {Math.floor(info.minutes / 60)}:{info.minutes % 60}:00 (\n        {Math.floor(\n          (info.minutes * 60 - props.secondsUsed) / 60 / 60\n        ).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {Math.floor(\n          ((info.minutes * 60 - props.secondsUsed) / 60) % 60\n        ).toLocaleString(undefined, {\n          minimumIntegerDigits: 2\n        })}\n        :\n        {((info.minutes * 60 - props.secondsUsed) % 60).toLocaleString(\n          undefined,\n          {\n            minimumIntegerDigits: 2\n          }\n        )}{' '}\n        rimanente)\n      </p>\n      <Button\n        label={\n          info.order ==\n          Math.max(...Object.values(sectionInfo).map((i) => i.order))\n            ? 'Vedi esito del test'\n            : 'Prossima sezione'\n        }\n        onClick={props.goToNextSection}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { sectionInfo } from '../../utils/constants'\nimport { section } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport Button from '../Util/Button'\n\nconst baseStyle = createStyle({\n  display: 'flex',\n  paddingTop: '10px',\n  paddingBottom: '20px',\n  alignItems: 'center',\n  flexDirection: 'column'\n})\n\ninterface SectionStartProps {\n  section: section\n  startSection: () => void\n}\nexport default function SectionStart(props: SectionStartProps) {\n  const info = sectionInfo[props.section]\n\n  return (\n    <div style={baseStyle}>\n      <p>\n        Stai per iniziare: {info.name}\n        <br />-{' '}\n        {props.section == 'com'\n          ? `${info.sample} bran${info.sample > 1 ? 'i' : 'o'}, `\n          : ''}\n        {info.sample} domande\n        <br />- {info.minutes} minuti\n        <br />- Peso sezione:{' '}\n        {typeof info.coeff == 'number' ? info.coeff : info.coeff.toFraction()}\n      </p>\n      <Button label=\"Inzia sezione\" onClick={props.startSection} />\n    </div>\n  )\n}\n","import React from 'react'\nimport { TimerResult } from 'react-timer-hook'\nimport { createStyle, theme } from '../../utils/style'\n\nconst alertThreshold = 60\n\nconst divStyle = createStyle({\n  display: 'flex',\n  fontWeight: 'bold',\n  color: theme.timerGreen,\n  border: '2px solid',\n  borderRadius: '4px',\n  height: '1.75em',\n  fontSize: '1.25em',\n  alignItems: 'center',\n  paddingInline: '10px'\n})\n\nconst expiring = createStyle({\n  color: theme.timerRed\n})\n\ninterface TimerProps {\n  timer: TimerResult\n  expired: boolean\n}\nexport default function Timer(props: TimerProps) {\n  const { timer } = props\n\n  return (\n    <div\n      style={{\n        ...divStyle,\n        ...((timer.hours * 60 + timer.minutes) * 60 + timer.seconds <\n          alertThreshold &&\n        !(timer.hours + timer.minutes + timer.seconds == 0 && !props.expired)\n          ? expiring\n          : {})\n      }}\n    >\n      {timer.hours.toLocaleString(undefined, {\n        minimumIntegerDigits: 2\n      })}\n      :\n      {timer.minutes.toLocaleString(undefined, {\n        minimumIntegerDigits: 2\n      })}\n      :{timer.seconds.toLocaleString(undefined, { minimumIntegerDigits: 2 })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { TimerResult } from 'react-timer-hook'\nimport { getSectionName } from '../../utils/constants'\nimport { section, QuestionsData } from '../../utils/database'\nimport { createStyle } from '../../utils/style'\nimport { AnswersData } from '../App'\nimport Button from '../Util/Button'\nimport Timer from './Timer'\n\nconst outerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between'\n})\n\nconst innerDiv = createStyle({\n  display: 'flex',\n  alignItems: 'baseline',\n  flexDirection: 'row',\n  gap: '15px',\n  fontSize: '11pt'\n})\n\ninterface TopControlsProps {\n  active: boolean\n  answers: AnswersData\n  closeSection: () => void\n  currentSection: section\n  timer: TimerResult\n  timerExpired: boolean\n  questions: QuestionsData\n}\n\nexport default function TopControls(props: TopControlsProps) {\n  const { currentSection } = props\n\n  return (\n    <div style={outerDiv}>\n      <div style={innerDiv}>\n        <div>\n          <p>\n            Sezione: <b>{getSectionName(currentSection)}</b> <br />\n            Riposte: {props.answers[currentSection].length} /{' '}\n            {props.questions[currentSection].length} (\n            {props.answers[currentSection].reduce(\n              (acc, curr) => acc + (curr.flagged ? 1 : 0),\n              0\n            )}{' '}\n            da rivedere)\n          </p>\n        </div>\n        {props.active && (\n          <Button label=\"Chiudi sezione\" onClick={props.closeSection} />\n        )}\n      </div>\n      <Timer timer={props.timer} expired={props.timerExpired} />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useTimer } from 'react-timer-hook'\nimport { getNextSection, sectionInfo } from '../../utils/constants'\nimport { section, QuestionsData } from '../../utils/database'\nimport { statePair } from '../../utils/types'\nimport { Answer, AnswersData, TimeRecord, view } from '../App'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionHeader from './QuestionHeader'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport SectionRecap from './SectionRecap'\nimport SectionStart from './SectionStart'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  answersState: statePair<AnswersData>\n  questions: QuestionsData\n  sectionState: statePair<section>\n  timeRecordState: statePair<TimeRecord>\n  viewState: statePair<view>\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  const [qIndex, originalSetQIndex] = useState(0),\n    tmpFlaggedState = useState(false),\n    tmpAnswerState = useState<Answer['letter']>(),\n    tmpTimerExpiredState = useState(false)\n\n  const [currentSection, setSection] = props.sectionState,\n    [view, setView] = props.viewState,\n    [answers, setAnswers] = props.answersState,\n    [timeRecord, setTimeRecord] = props.timeRecordState\n\n  const closeSection = () => {\n    setView('TOL-secRecap')\n    setQIndex(0)\n\n    const nextAnswers = answers\n    nextAnswers[currentSection] = nextAnswers[currentSection].map((a) => ({\n      ...a,\n      flagged: false\n    }))\n    setAnswers(nextAnswers)\n\n    const nextTR = timeRecord\n    nextTR[currentSection] =\n      sectionInfo[currentSection].minutes * 60 -\n      ((timer.hours * 60 + timer.minutes) * 60 + timer.seconds)\n    setTimeRecord(nextTR)\n\n    timer.restart(new Date(), false)\n  }\n\n  const setQIndex = (index: React.SetStateAction<number>) => {\n    const curr = answers[currentSection][index as number]\n    tmpFlaggedState[1](curr?.flagged || false)\n    tmpAnswerState[1](curr?.letter || undefined)\n    return originalSetQIndex(index)\n  }\n\n  const shiftQIndex = (offset: number) => {\n    const next =\n      (qIndex + offset + sectionQuestions.length) % sectionQuestions.length || 0\n    return setQIndex(next)\n  }\n\n  const timer = useTimer({\n    expiryTimestamp: getTimerExpDate(sectionInfo[currentSection].minutes),\n    autoStart: false,\n    onExpire: () => {\n      closeSection()\n      tmpTimerExpiredState[1](true)\n    }\n  })\n\n  const currentQuestionIndexState: statePair<number> = [qIndex, setQIndex]\n  if (!props.questions) return <span>Loading...</span>\n\n  const sectionQuestions = props.questions[props.sectionState[0]],\n    currentQuestion = sectionQuestions[qIndex],\n    currentAnswer = answers[currentSection][qIndex]\n\n  const getViewElement = () => {\n    if (view == 'TOL-startSec')\n      return (\n        <SectionStart\n          section={currentSection}\n          startSection={() => {\n            setView('TOL-testing')\n            timer.start()\n          }}\n        />\n      )\n    else if (view == 'TOL-testing')\n      return (\n        <div>\n          <QuestionHeader\n            currentAnswer={currentAnswer}\n            questionIndex={qIndex}\n            shiftQuestionIndex={shiftQIndex}\n            sectionQuestions={sectionQuestions}\n          />\n          <QuestionView question={currentQuestion} />\n          <AnswerForm\n            currentAnswer={currentAnswer}\n            currentQuestion={currentQuestion}\n            tmpAnswerState={tmpAnswerState}\n          />\n          <BottomControls\n            currentQuestion={currentQuestion}\n            tmpAnswerState={tmpAnswerState}\n            tmpFlaggedState={tmpFlaggedState}\n            updateAnswer={(a) => {\n              const next = answers\n              next[currentSection][qIndex] = a\n              setAnswers(next)\n              shiftQIndex(1)\n            }}\n          />\n        </div>\n      )\n    else if (view == 'TOL-secRecap')\n      return (\n        <SectionRecap\n          goToNextSection={() => {\n            const nextSection = getNextSection(currentSection)\n            if (nextSection) {\n              setSection(nextSection)\n              timer.restart(\n                getTimerExpDate(sectionInfo[nextSection].minutes),\n                false\n              )\n              tmpTimerExpiredState[1](false)\n              setView('TOL-startSec')\n            } else {\n              setView('INFO-end')\n            }\n          }}\n          section={currentSection}\n          secondsUsed={timeRecord[currentSection] || 0}\n          sectionAnswers={answers[currentSection]}\n          sectionQuestions={props.questions[currentSection]}\n        />\n      )\n    else return <div />\n  }\n\n  return (\n    <div>\n      <TopControls\n        active={view == 'TOL-testing'}\n        answers={answers}\n        closeSection={closeSection}\n        currentSection={currentSection}\n        questions={props.questions}\n        timer={timer}\n        timerExpired={tmpTimerExpiredState[0]}\n      />\n      <RecapBar\n        active={view == 'TOL-testing'}\n        currentQuestionIndexState={currentQuestionIndexState}\n        sectionAnswers={answers[currentSection]}\n        sectionQuestions={sectionQuestions}\n      />\n      {getViewElement()}\n    </div>\n  )\n}\n\nfunction getTimerExpDate(minutes: number) {\n  const res = new Date()\n  res.setSeconds(res.getSeconds() + minutes * 60)\n  return res\n}\n","import React from 'react'\nimport { createStyle, theme } from '../../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  answerLetter,\n  section,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport InfoView from './InfoView/InfoView'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Util/Separator'\n\nexport type view =\n  | 'dbPreview'\n  | 'INFO-start'\n  | 'TOL-startSec'\n  | 'TOL-testing'\n  | 'TOL-secRecap'\n  | 'INFO-end'\n\nexport interface Answer {\n  id: string\n  sub?: string\n  letter: answerLetter | undefined\n  flagged: boolean\n}\n\nexport type AnswersData = Record<section, Answer[]>\n\nexport type TimeRecord = Partial<Record<section, number>>\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, setQuestions] = useState<QuestionsData>()\n  const [view, setView] = useState<view>('dbPreview')\n  const sectionState = useState<section>('ing')\n  const answersState = useState<AnswersData>({\n    ing: [],\n    mat: [],\n    com: [],\n    fis: []\n  })\n  const timeRecordState = useState<TimeRecord>({})\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          setQuestions(selectRandomQuestions(db))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header viewState={[view, setView]} />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : view.startsWith('TOL') && questions ? (\n        <QuestionsForm\n          answersState={answersState}\n          questions={questions as QuestionsData}\n          sectionState={sectionState}\n          timeRecordState={timeRecordState}\n          viewState={[view, setView]}\n        />\n      ) : view.startsWith('INFO') && questions ? (\n        <InfoView\n          answers={answersState[0]}\n          questions={questions}\n          viewState={[view, setView]}\n        />\n      ) : undefined}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}