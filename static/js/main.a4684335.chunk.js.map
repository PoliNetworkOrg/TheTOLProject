{"version":3,"sources":["utils/database.ts","components/QuestionsForm/RenderedText.tsx","components/DBPreview.tsx","components/ErrorView.tsx","utils/style.ts","components/Header.tsx","components/QuestionsForm/AnswerForm.tsx","components/QuestionsForm/BottomControls.tsx","components/QuestionsForm/QuestionView.tsx","components/QuestionsForm/RecapBar.tsx","components/QuestionsForm/TopControls.tsx","components/QuestionsForm/QuestionsForm.tsx","components/Separator.tsx","components/App.tsx","index.tsx"],"names":["categoryDict","quesiti_ING","quesiti_MAT","quesiti_COM","quesiti_FIS","a","axios","get","data","db","meta","version","packageJson","Error","RenderedText","text","DBPreview","Object","entries","filter","map","key","questions","q","answers","b","c","d","e","id","ErrorView","hidden","display","internal","baseStyle","fontFamily","createStyle","style","divStyle","height","textStyle","fontSize","Header","AnswerForm","BottomControls","QuestionView","RecapBar","TopControls","QuestionsForm","props","value","length","join","backgroundColor","color","margin","Separator","sampleSize","ing","mat","com","fis","App","useState","database","loadDatabase","selectQuestions","view","loadingError","showError","useEffect","readDatabase","then","options","fromEntries","values","includes","resIds","_","shuffle","uniq","v","slice","selectRandomQuestions","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4684335.chunk.js","sourcesContent":["import axios from 'axios'\nimport _ from 'underscore'\nimport packageJson from '../../package.json'\n\nexport const categoryDict = {\n  quesiti_ING: 'ing',\n  quesiti_MAT: 'mat',\n  quesiti_COM: 'com',\n  quesiti_FIS: 'fis'\n} as const\nexport type category = typeof categoryDict[keyof typeof categoryDict]\n\ntype answerLetter = 'a' | 'b' | 'c' | 'd' | 'e'\n\nexport interface Question {\n  id: string\n  text: string\n  answers: Record<answerLetter, string>\n  correct: answerLetter\n  attachments: string[]\n}\n\nexport type QuestionsData = Record<category, Question[]>\n\nexport interface Database extends QuestionsData {\n  meta: {\n    version: string\n    lastUpdate: string\n  }\n}\n\nexport async function readDatabase() {\n  const db = (\n    await axios.get(\n      'https://raw.githubusercontent.com/PoliNetworkOrg/TheTOLProject/data/database.json'\n    )\n  )?.data as Database\n\n  if (db?.meta?.version != packageJson.version)\n    throw new Error(\n      `Database version doesn't match application.\\nDatabase: ${db?.meta?.version}\\nApp: ${packageJson.version}`\n    )\n\n  return db\n}\n\nexport function selectRandomQuestions(\n  db: Database,\n  options: Record<category, number | 'all'> | 'all'\n): QuestionsData {\n  return Object.fromEntries(\n    // Manipulate db entries\n    (Object.entries(db) as [category /* or \"meta\" */, Question[]][])\n      // Select only entries associated with a category <=> exclude \"meta\"\n      .filter(([key]) =>\n        (Object.values(categoryDict) as string[]).includes(key)\n      )\n      .map(([key, questions]) => {\n        // If we want all the questions, return all of them\n        if (options == 'all' || options[key] == 'all') return [key, questions]\n\n        // Otherwise, get the question ids, remove duplicates, shuffle them, and select the appropriate number of questions.\n        const resIds = _.shuffle(_.uniq(questions.map((v) => v.id))).slice(\n          0,\n          options[key] as number\n        )\n\n        // Return only the questions\n        return [key, questions.filter((q) => resIds.includes(q.id))]\n      })\n  ) as QuestionsData\n}\n","import React from 'react'\n// @ts-expect-error Waiting for DefinitelyTyped PR to be merged: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56687\nimport Latex from 'react-latex'\n\ninterface RenderedTextProps {\n  text: string\n}\nexport default function RenderedText({ text }: RenderedTextProps) {\n  return <Latex>{text}</Latex>\n}\n","import React from 'react'\nimport { category, Database, Question } from '../utils/database'\n\nimport RenderedText from './QuestionsForm/RenderedText'\n\ninterface DBPreviewProps {\n  db: Database\n}\n\nexport default function DBPreview({ db }: DBPreviewProps) {\n  return (\n    <div>\n      {(\n        Object.entries(db).filter(([key]) => key != 'meta') as [\n          category,\n          Question[]\n        ][]\n      ).map(([key, questions]) => (\n        <div key={key}>\n          <h3>Category: {key}</h3>\n          <ul>\n            {questions.map((q) => (\n              <div key={key + q.id}>\n                <RenderedText text={q.text} />\n                <br />\n                <RenderedText text={q.answers.a} />\n                <br />\n                <RenderedText text={q.answers.b} />\n                <br />\n                <RenderedText text={q.answers.c} />\n                <br />\n                <RenderedText text={q.answers.d} />\n                <br />\n                <RenderedText text={q.answers.e} />\n                <br />\n                <br />\n                <br />\n              </div>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface ErrorViewProps {\n  hidden: boolean\n  display: string\n  internal?: Error\n}\n\nexport default function ErrorView({\n  hidden,\n  display,\n  internal\n}: ErrorViewProps) {\n  return (\n    <div hidden={hidden}>\n      <h3>{display}</h3>\n      <blockquote>{internal + ''}</blockquote>\n    </div>\n  )\n}\n","import * as CSS from 'csstype'\n\nconst baseStyle: CSS.Properties = {\n  fontFamily: 'verdana'\n}\n\nexport function createStyle(style: CSS.Properties) {\n  return { ...baseStyle, ...style }\n}\n\nexport const theme = {\n  primary: '#069'\n}\n","import React from 'react'\nimport { createStyle } from '../utils/style'\n\nconst divStyle = createStyle({\n  height: '70px'\n})\n\nconst textStyle = createStyle({\n  fontSize: '18pt'\n})\n\nexport default function Header() {\n  return (\n    <div style={divStyle}>\n      <h1 style={textStyle}>\n        PoliNetwork banner placeholder - The TOL Project\n      </h1>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function AnswerForm() {\n  return (\n    <div>\n      <p>Placeholder: answer form</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function BottomControls() {\n  return (\n    <div>\n      <p>Placeholder: bottom controls</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function QuestionView() {\n  return (\n    <div>\n      <p>Placeholder: question header, question text</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function RecapBar() {\n  return (\n    <div>\n      <p>Placeholder: recap bar</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function TopControls() {\n  return (\n    <div>\n      <p>Placeholder: \"sezione\", \"risposte\", end section, clock</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { QuestionsData } from '../../utils/database'\nimport AnswerForm from './AnswerForm'\nimport BottomControls from './BottomControls'\nimport QuestionView from './QuestionView'\nimport RecapBar from './RecapBar'\nimport TopControls from './TopControls'\n\ninterface QuestionsFormProps {\n  questions?: QuestionsData\n}\nexport default function QuestionsForm(props: QuestionsFormProps) {\n  return (\n    <div hidden={!props.questions}>\n      <code>\n        {props.questions &&\n          Object.entries(props.questions)\n            .map(([key, value]) => `${key}: ${value.length}`)\n            .join('\\n')}\n      </code>\n      <TopControls />\n      <RecapBar />\n      <QuestionView />\n      <AnswerForm />\n      <BottomControls />\n    </div>\n  )\n}\n","import React from 'react'\nimport { createStyle, theme } from '../utils/style'\n\nconst divStyle = createStyle({\n  height: '15px',\n  backgroundColor: theme.primary\n})\nconst textStyle = createStyle({\n  color: 'white',\n  margin: 'auto .5em',\n  fontSize: '9.5pt'\n})\n\ninterface SeparatorProps {\n  text?: string\n}\nexport default function Separator(props: SeparatorProps) {\n  return (\n    <div style={divStyle}>\n      <p style={textStyle}>{props.text || ''}</p>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  category,\n  Database,\n  QuestionsData,\n  readDatabase,\n  selectRandomQuestions\n} from '../utils/database'\nimport DBPreview from './DBPreview'\nimport ErrorView from './ErrorView'\nimport Header from './Header'\nimport QuestionsForm from './QuestionsForm/QuestionsForm'\nimport Separator from './Separator'\n\nconst sampleSize: Record<category, number> = {\n  ing: 30,\n  mat: 25,\n  com: 1, // We're counting IDs, so it'll be only one (worth 5 questions)\n  fis: 5\n}\n\ntype view = 'dbPreview'\n\nexport default function App() {\n  const [database, loadDatabase] = useState<Database>()\n  const [questions, selectQuestions] = useState<QuestionsData>()\n  const [view] = useState<view>('dbPreview')\n  const [loadingError, showError] = useState<[string, Error] | []>([])\n\n  useEffect(() => {\n    if (!database)\n      readDatabase()\n        .then((db) => {\n          loadDatabase(db)\n          selectQuestions(selectRandomQuestions(db, sampleSize))\n        })\n        .catch((e) => {\n          showError([\n            'There has been an issue while fetching the database data. Please retry later.',\n            e\n          ])\n        })\n  })\n\n  return (\n    <div>\n      <Header />\n      <Separator text=\"Placeholder top separator text\" />\n      <ErrorView\n        hidden={!loadingError[0]}\n        display={loadingError[0] || ''}\n        internal={loadingError[1]}\n      />\n      {/* <p>App start</p> */}\n\n      {view == 'dbPreview' && database ? (\n        <DBPreview db={database} />\n      ) : (\n        <QuestionsForm questions={questions} />\n      )}\n      {/* <p>App end</p> */}\n      <Separator text=\"Placeholder bottom separator text\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}